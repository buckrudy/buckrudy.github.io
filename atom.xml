<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Googol&#39;s Notes</title>
  
  <subtitle>古戈大神&#39;s Death Note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-06T02:16:31.538Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Googol Buck</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rtl8292es-WiFi中继</title>
    <link href="http://yoursite.com/notes/rtl8292es-WiFi%E4%B8%AD%E7%BB%A7/20180605.html"/>
    <id>http://yoursite.com/notes/rtl8292es-WiFi中继/20180605.html</id>
    <published>2018-06-05T11:41:22.000Z</published>
    <updated>2018-06-06T02:16:31.538Z</updated>
    
    <content type="html"><![CDATA[<p>公司的某个项目需要做WiFi中继，使用的WiFi芯片是 Realtek 的 rtl8192es。<br>为了方便用户，还需要做搜索附近wifi的功能。这里只做后台，web前端就不写了。</p><p>安装rtl8192es驱动后，至少会出现两接口 <code>wlan0</code> 和 <code>wlan0-vxd</code>。<br>其中 <code>wlan0</code> 做AP，<code>wlan0-vxd</code> 做STA。</p><h3 id="配置-wlan0-vxd"><a href="#配置-wlan0-vxd" class="headerlink" title="配置 wlan0-vxd"></a>配置 wlan0-vxd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IFNAME=wlan0-vxd</span><br><span class="line">iwpriv $IFNAME copy_mib</span><br><span class="line">iwpriv $IFNAME set_mib opmode=8</span><br><span class="line">ifconfig $IFNAME hw ether 00:e0:4c:01:f0:17</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用-wpa-cli-搜索附近wifi信号"><a href="#使用-wpa-cli-搜索附近wifi信号" class="headerlink" title="使用 wpa_cli 搜索附近wifi信号"></a>使用 wpa_cli 搜索附近wifi信号</h3><p><code>wpa_cli</code> 和 <code>wpa_supplicant</code> 都在 wpa_supplicant 包中。</p><p>使用 <code>wpa_cli</code> 前， <code>wpa_supplicant</code> 必须先运行。</p><p>启动 <code>wpa_supplicant</code> :<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpa_supplicant -q -B -i wlan0-vxd -D wext -C/run/wpa_supplicant</span><br></pre></td></tr></table></figure></p><blockquote><p>我运行后显示 “eap_proxy:eap_proxy_get_imsi: Not initialized” ，不管它</p></blockquote><p>使用 <code>wpa_cli</code> 搜索wifi：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wpa_cli -i wlan0-vxd scan</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> wpa_cli -i wlan0-vxd scan_results</span></span><br><span class="line">bssid / frequency / signal level / flags / ssid</span><br><span class="line">d4:ee:07:53:3c:d4       2452    -42     [WPA-PSK-CCMP][WPA2-PSK-CCMP][ESS]      HiWiFi_533CD4</span><br><span class="line">8c:f2:28:3e:9d:b2       2412    -50     [WPA-PSK-CCMP][WPA2-PSK-CCMP][ESS]      MERCURY_9DB2</span><br><span class="line">00:03:7f:a7:be:99       2432    -50     [WPA-PSK-CCMP+TKIP][WPA2-PSK-CCMP+TKIP][ESS]    cam_26493D</span><br><span class="line">00:03:7f:c7:a9:75       2412    -58     [WPA-PSK-CCMP+TKIP][WPA2-PSK-CCMP+TKIP][ESS]    cam_58A9AF</span><br><span class="line">dc:fe:18:7b:6c:48       2437    -58     [WPA-PSK-CCMP][WPA2-PSK-CCMP][ESS]      blx1</span><br><span class="line">ec:26:ca:53:4c:a2       2412    -62     [WPA-PSK-CCMP][WPA2-PSK-CCMP][ESS]      XYDZ</span><br><span class="line">02:03:7f:90:1b:df       2437    -62     [WPA-PSK-CCMP+TKIP][WPA2-PSK-CCMP+TKIP][WPS][ESS]       MIFI_WR706_BDF</span><br><span class="line">c0:61:18:d0:02:92       2412    -66     [WPA-PSK-CCMP][WPA2-PSK-CCMP][WPS][ESS] MERCURY_0292</span><br><span class="line">02:03:7f:2a:84:b3       2437    -66     [WPA-PSK-CCMP+TKIP][WPA2-PSK-CCMP+TKIP][WPS][ESS]       MIFI_WR706_4B3</span><br><span class="line">c8:3a:35:4e:67:38       2457    -70     [WPA-PSK-CCMP][ESS]     blx</span><br><span class="line">8c:a6:df:25:c4:c2       2412    -70     [WPA-PSK-CCMP][WPA2-PSK-CCMP][ESS]      \xe5\xae\x8f\xe7\x99\xbb</span><br><span class="line">54:66:6c:8e:0b:e0       2447    -78     [WPA-PSK-CCMP+TKIP][WPA2-PSK-CCMP+TKIP][WPS][ESS]       mifidata</span><br><span class="line">ec:88:8f:40:a8:ba       2437    -78     [WPA-PSK-CCMP+TKIP][WPA2-PSK-CCMP+TKIP][WPS][ESS]       TP-LINK_F16/2/23</span><br><span class="line">f4:ee:14:14:d9:16       2462    -78     [WPA-PSK-CCMP+TKIP][WPA2-PSK-CCMP+TKIP][ESS]    MERCURY_14D916</span><br><span class="line">00:03:7f:10:0f:01       2422    -78     [WPA-PSK-CCMP+TKIP][WPA2-PSK-CCMP+TKIP][ESS]    mFi_46A085</span><br><span class="line">5e:bb:58:15:eb:f2       2462    -78     [WPA2-PSK-CCMP][ESS]    ASCOTT</span><br><span class="line">9c:21:6a:0c:08:f8       2437    -82     [WPA-PSK-CCMP][WPA2-PSK-CCMP][WPS][ESS] TP-LINK_0C08F8</span><br><span class="line">f4:ec:38:5a:08:b4       2462    -82     [WPA-PSK-CCMP][WPA2-PSK-CCMP][WPS][ESS] MIFIDATA_HJC_VIP</span><br><span class="line">52:48:9a:c6:7b:6f       2462    -82     [WPA2-PSK-CCMP][ESS]    MIFI007</span><br><span class="line">70:af:6a:84:f4:cc       2462    -84     [WPA-PSK-CCMP][WPA2-PSK-CCMP][ESS]      360WiFi-84F4CC</span><br></pre></td></tr></table></figure></p><p>根据这个输出格式就可以编写自动搜索工具了</p><h3 id="自动搜索工具"><a href="#自动搜索工具" class="headerlink" title="自动搜索工具"></a>自动搜索工具</h3><figure class="highlight c"><figcaption><span>scan-wifi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCAN    <span class="meta-string">"wpa_cli -i %s scan"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCAN_RESULTS    <span class="meta-string">"wpa_cli -i %s scan_results | awk '&#123; print $4,$5 &#125;'"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCAN_RESULTS_SORT_BY_SIGNAL <span class="meta-string">"wpa_cli -i %s scan_results | tail -n+2 | sort -rn -k3 | awk '&#123; print $4,$5 &#125;'"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_LEN 128</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERFACE <span class="meta-string">"wlan0-vxd"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_LEN 2048</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SSID_LEN 32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_WIFI_INFO_LEN 32</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WIFI_INFO</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> crypt;</span><br><span class="line">    <span class="keyword">char</span> ssid[SSID_LEN];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> WIFI_CRYPT &#123;</span><br><span class="line">    OPEN = <span class="number">0x0</span>,</span><br><span class="line">    WEP = <span class="number">0x1</span>,</span><br><span class="line">    WPA = <span class="number">0x2</span>,</span><br><span class="line">    WPA2 = <span class="number">0x4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_wifi_info</span><span class="params">(struct WIFI_INFO *info, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (!info || len &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ssid: %s, crypt: %d\n"</span>, info[i].ssid, info[i].crypt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 检查 wpa_supplicant 进程，使用 wpa_cli 搜索wifi前，wpa_supplicant 必须已启动 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check_wpa_supplicant</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//wpa_supplicant 没有运行就启动 wpa_supplicant</span></span><br><span class="line">    system(<span class="string">"ps | grep wpa_supplicant | grep -v grep || wpa_supplicant -q -B -i wlan0-vxd -D wext -C/run/wpa_supplicant"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_wifi_to_file</span><span class="params">(struct WIFI_INFO *wifi_info, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(<span class="string">"/scan_wifi"</span>, <span class="string">"wb+"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    fwrite(wifi_info, <span class="keyword">sizeof</span>(struct WIFI_INFO) * len, <span class="number">1</span>, fp);</span><br><span class="line">    fflush(fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    system(<span class="string">"rm -rf /tmp/scan_wifi"</span>);    <span class="comment">//先删除吧，不删除，我总感觉问题</span></span><br><span class="line">    fd = open(<span class="string">"/tmp/scan_wifi"</span>, O_CREAT|O_TRUNC|O_RDWR);</span><br><span class="line">    write(fd, wifi_info, <span class="keyword">sizeof</span>(struct WIFI_INFO) * len);</span><br><span class="line">    close(fd);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StrToHex</span><span class="params">(<span class="keyword">char</span> *pDest, <span class="keyword">char</span> *pSrc, <span class="keyword">int</span> nLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span>  ch1, ch2;</span><br><span class="line">    <span class="keyword">int</span> nSrcLen = nLen/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; nSrcLen ; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        ch1 = pSrc[i*<span class="number">2</span>];</span><br><span class="line">        ch2 = pSrc[i*<span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(ch1&gt;=<span class="string">'0'</span> &amp;&amp; ch1&lt;=<span class="string">'9'</span>)</span><br><span class="line">            ch1=ch1 - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch1&gt;=<span class="string">'A'</span> &amp;&amp; ch1&lt;=<span class="string">'F'</span>)</span><br><span class="line">            ch1=ch1 - <span class="string">'A'</span> + <span class="number">0xA</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch1&gt;=<span class="string">'a'</span> &amp;&amp; ch1&lt;=<span class="string">'f'</span>)</span><br><span class="line">            ch1=ch1 - <span class="string">'a'</span> + <span class="number">0xa</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch2&gt;=<span class="string">'0'</span> &amp;&amp; ch2&lt;=<span class="string">'9'</span>)</span><br><span class="line">            ch2=ch2 - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch2&gt;=<span class="string">'A'</span> &amp;&amp; ch2&lt;=<span class="string">'F'</span>)</span><br><span class="line">            ch2=ch2 - <span class="string">'A'</span> + <span class="number">0xA</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch2&gt;=<span class="string">'a'</span> &amp;&amp; ch2&lt;=<span class="string">'f'</span>)</span><br><span class="line">            ch2=ch2 - <span class="string">'a'</span> + <span class="number">0xa</span>;</span><br><span class="line">        pDest[i] = ( ch1 &lt;&lt; <span class="number">4</span> ) | ch2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************</span></span><br><span class="line"><span class="comment"> * 去除ssid中的不识别字符 </span></span><br><span class="line"><span class="comment"> * @src: 源字符串地址</span></span><br><span class="line"><span class="comment"> * @dst: 最后存储字符地址</span></span><br><span class="line"><span class="comment"> * @src_len: 源字符串长度</span></span><br><span class="line"><span class="comment"> *********************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove_bad_char</span><span class="params">(<span class="keyword">char</span> *src, <span class="keyword">char</span> *dst, <span class="keyword">int</span> src_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, cp;</span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line">    <span class="keyword">if</span> (!src || !dst || src_len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((cp = *src++) != <span class="string">'\0'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cp == <span class="string">'\\'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*src == <span class="string">'x'</span>) &#123;</span><br><span class="line">                StrToHex(dst, src+<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">                dst++;</span><br><span class="line">                src += <span class="number">3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *dst++ = cp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *dst = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> cmd[CMD_LEN];</span><br><span class="line">    <span class="keyword">char</span> buf[BUFF_LEN], hex[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> *p, *sp, *sp_h;</span><br><span class="line">    <span class="keyword">int</span> ret, len = <span class="number">0</span>, h_len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> tell;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">WIFI_INFO</span> <span class="title">wifi_info</span>[<span class="title">MAX_WIFI_INFO_LEN</span>] = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> retrys = <span class="number">3</span>; <span class="comment">//最多尝试3次搜索</span></span><br><span class="line"></span><br><span class="line">BEGIN:</span><br><span class="line"></span><br><span class="line">    check_wpa_supplicant();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sleep(2);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(cmd));</span><br><span class="line">    <span class="built_in">snprintf</span>(cmd, CMD_LEN, SCAN, INTERFACE);</span><br><span class="line">    fp = popen(cmd, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        perror(<span class="string">"popen failed: "</span>);</span><br><span class="line">        <span class="keyword">if</span> (retrys-- &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">goto</span> BEGIN;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = fread(buf, BUFF_LEN, <span class="number">1</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ret = %d\n"</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strstr</span>(buf, <span class="string">"OK"</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(SCAN <span class="string">", not return OK\n"</span>, INTERFACE);</span><br><span class="line">        pclose(fp);</span><br><span class="line">        <span class="keyword">if</span> (retrys-- &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">goto</span> BEGIN;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"scan return: %s\n"</span>, buf);</span><br><span class="line">    pclose(fp);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get scan results</span></span><br><span class="line">    <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(cmd));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(SCAN_RESULTS_SORT_BY_SIGNAL)</span></span><br><span class="line">    <span class="built_in">snprintf</span>(cmd, CMD_LEN, SCAN_RESULTS, INTERFACE);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>   <span class="comment">//去掉首行，并按信号强度排序</span></span></span><br><span class="line">    <span class="built_in">snprintf</span>(cmd, CMD_LEN, SCAN_RESULTS_SORT_BY_SIGNAL, INTERFACE);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    fp = popen(cmd, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        perror(<span class="string">"popen failed: "</span>);</span><br><span class="line">        <span class="keyword">if</span> (retrys-- &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">goto</span> BEGIN;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    fgets(buf, BUFF_LEN, fp);   <span class="comment">//drop first line</span></span><br><span class="line"></span><br><span class="line">    ret = fread(buf, BUFF_LEN, <span class="number">1</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(SCAN_RESULTS_SORT_BY_SIGNAL)</span></span><br><span class="line">    fgets(buf, BUFF_LEN, fp);   <span class="comment">//drop first line</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>   <span class="comment">//去掉首行，并按信号强度排序</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//printf("\n");</span></span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, BUFF_LEN, fp)) &#123;</span><br><span class="line">        <span class="comment">//printf("%s,%s,%s\n", strstr(buf, "WPA-PSK")?"WPA":"", strstr(buf, "WPA2-PSK")?"WPA2":"", (p=strstr(buf, " "))?p:NULL);</span></span><br><span class="line">        *<span class="built_in">strstr</span>(buf, <span class="string">"\n"</span>) = <span class="string">'\0'</span>;  <span class="comment">//去除\n</span></span><br><span class="line">        p = <span class="built_in">strstr</span>(buf, <span class="string">" "</span>); <span class="comment">//空格后面是ssid</span></span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="built_in">strncpy</span>(wifi_info[len].ssid, p+<span class="number">1</span>, SSID_LEN);</span><br><span class="line">            wifi_info[len].crypt = <span class="number">0</span>;</span><br><span class="line">            wifi_info[len].crypt = (<span class="built_in">strstr</span>(buf, <span class="string">"WPA-PSK"</span>)?WPA:<span class="number">0</span>) | (<span class="built_in">strstr</span>(buf, <span class="string">"WPA2-PSK"</span>)?WPA2:<span class="number">0</span>) | (<span class="built_in">strstr</span>(buf, <span class="string">"WEP"</span>)?WEP:<span class="number">0</span>);</span><br><span class="line">            <span class="comment">/* 去除不识别字符 例: \xe5\xae\x8f\xe7\x99\xbb 转成十六进制：e5 ae  8f e7 99 bb */</span></span><br><span class="line">            <span class="keyword">if</span> (remove_bad_char(wifi_info[len].ssid, wifi_info[len].ssid, <span class="built_in">strlen</span>(wifi_info[len].ssid)))</span><br><span class="line">                len++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pclose(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span>==len)</span><br><span class="line">        <span class="keyword">if</span> (retrys-- &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">goto</span> BEGIN;</span><br><span class="line"></span><br><span class="line">    print_wifi_info(wifi_info, len);</span><br><span class="line">    write_wifi_to_file(wifi_info, len);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中继脚本"><a href="#中继脚本" class="headerlink" title="中继脚本"></a>中继脚本</h3><figure class="highlight bash"><figcaption><span>wifi-repeater.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">MODULES_PATH=/usr/lib/modules/3.18.44/extra</span><br><span class="line"></span><br><span class="line"><span class="comment"># check sfe feature</span></span><br><span class="line"><span class="function"><span class="title">check_sfe</span></span>() &#123;</span><br><span class="line">    lsmod | grep shortcut_fe_cm 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line">    <span class="built_in">echo</span> $?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove sfe feature</span></span><br><span class="line"><span class="function"><span class="title">remove_sfe</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> res=`check_sfe`</span><br><span class="line">    <span class="keyword">if</span> [ 0 == <span class="variable">$res</span> ];<span class="keyword">then</span></span><br><span class="line">        rmmod shortcut_fe_cm</span><br><span class="line">        rmmod shortcut_fe</span><br><span class="line">        rmmod shortcut_fe_ipv6</span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># install sfe feature</span></span><br><span class="line"><span class="function"><span class="title">install_sfe</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> res=`check_sfe`</span><br><span class="line">    <span class="keyword">if</span> [ 1 == <span class="variable">$res</span> ];<span class="keyword">then</span></span><br><span class="line">        insmod <span class="variable">$&#123;MODULES_PATH&#125;</span>/shortcut-fe.ko</span><br><span class="line">        insmod <span class="variable">$&#123;MODULES_PATH&#125;</span>/shortcut-fe-ipv6.ko</span><br><span class="line">        insmod <span class="variable">$&#123;MODULES_PATH&#125;</span>/shortcut-fe-cm.ko</span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># clean cache</span></span><br><span class="line"><span class="function"><span class="title">clean_cache</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">    <span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">    <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IFNAME=wlan0-vxd</span><br><span class="line">RESOLV_FILE=/etc/resolv.conf</span><br><span class="line">MAC_FILE=/usr/kthy/kthy_conf/config/wlan0-vxd.mac</span><br><span class="line">WIFI_REPEATER_MODE_FLAG_FILE=/usr/kthy/kthy_conf/config/wifi-repeater-mode</span><br><span class="line">NV_FILE=/usr/kthy/kthy_conf/config/userseting_nvconfig.txt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">change_wifi_repeater_mode_nv</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$WIFI_REPEATER_MODE_FLAG_FILE</span>"</span> ];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        sed -i <span class="string">"s/\(wifi_repeater_mode=\).*/\11/"</span> <span class="variable">$NV_FILE</span></span><br><span class="line">        kthy_nvc_apps write wifi_repeater_mode 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sed -i <span class="string">"s/\(wifi_repeater_mode=\).*/\10/"</span> <span class="variable">$NV_FILE</span></span><br><span class="line">        kthy_nvc_apps write wifi_repeater_mode 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_repeater</span></span>() &#123;</span><br><span class="line">    <span class="comment">#remove_sfe</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#check MAC file</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -e <span class="string">"<span class="variable">$MAC_FILE</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">        MAC=00:`openssl rand -hex 5 | sed <span class="string">'s/\(..\)/\1:/g; s/.$//'</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$MAC</span> &gt; <span class="variable">$MAC_FILE</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        MAC=`cat <span class="variable">$MAC_FILE</span>`</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    iwpriv <span class="variable">$IFNAME</span> copy_mib</span><br><span class="line">    iwpriv <span class="variable">$IFNAME</span> set_mib opmode=8</span><br><span class="line">    <span class="comment">#ifconfig $IFNAME hw ether 00:e0:4c:01:f0:17</span></span><br><span class="line">    ifconfig <span class="variable">$IFNAME</span> hw ether <span class="variable">$MAC</span></span><br><span class="line">    wpa_supplicant -Dwext -i<span class="variable">$IFNAME</span> -c /wpa_supplicant.conf -B</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"$?"</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> wpa_supplicant failed</span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    dhcpcd -t 30 -C resolv.conf <span class="variable">$IFNAME</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"$?"</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> dhcpcd failed</span><br><span class="line">        <span class="built_in">exit</span> 3</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment">#GW_IP=`route | awk '$1 == "default" &amp;&amp; $8 == "wlan0-vxd" &#123; print $2 &#125;'`</span></span><br><span class="line">    GW_IP=`route -n | awk <span class="string">'$1 == "0.0.0.0" &amp;&amp; $8 == "wlan0-vxd" &#123; print $2 &#125;'</span>`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! -z <span class="variable">$GW_IP</span> ];<span class="keyword">then</span></span><br><span class="line">        route add default gw <span class="variable">$GW_IP</span> dev <span class="variable">$IFNAME</span></span><br><span class="line">        ifconfig rmnet_data0 down</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ ! -e <span class="string">"<span class="variable">$RESOLV_FILE</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">            touch <span class="variable">$RESOLV_FILE</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        grep -e <span class="string">"^nameserver <span class="variable">$GW_IP</span>"</span> <span class="variable">$RESOLV_FILE</span></span><br><span class="line">        <span class="keyword">if</span> [ $? == 1 ];<span class="keyword">then</span></span><br><span class="line">            <span class="comment">#echo "nameserver $GW_IP #wifi-repeater" &gt;&gt; $RESOLV_FILE</span></span><br><span class="line">            sed -i <span class="string">"1i\nameserver <span class="variable">$GW_IP</span> #wifi-repeater"</span> <span class="variable">$RESOLV_FILE</span></span><br><span class="line">            <span class="comment">#check</span></span><br><span class="line">            grep -e <span class="string">"^nameserver <span class="variable">$GW_IP</span>"</span> <span class="variable">$RESOLV_FILE</span></span><br><span class="line">            <span class="keyword">if</span> [ $? == 1 ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"nameserver <span class="variable">$GW_IP</span> #wifi-repeater"</span> &gt;&gt; <span class="variable">$RESOLV_FILE</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        iptables -t nat -A POSTROUTING -o <span class="variable">$IFNAME</span> -j MASQUERADE</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    clean_cache</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop_repeater</span></span>() &#123;</span><br><span class="line">    killall -9 dhcpcd</span><br><span class="line">    killall -9 wpa_supplicant</span><br><span class="line">    iptables -t nat -D POSTROUTING -o <span class="variable">$IFNAME</span> -j MASQUERADE</span><br><span class="line">    ifconfig <span class="variable">$IFNAME</span> 0.0.0.0</span><br><span class="line">    ifconfig <span class="variable">$IFNAME</span> down</span><br><span class="line"></span><br><span class="line">    sed -i <span class="string">"/wifi-repeater/d"</span> <span class="variable">$RESOLV_FILE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#install_sfe</span></span><br><span class="line"></span><br><span class="line">    clean_cache</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#change_wifi_repeater_mode_nv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        start_repeater</span><br><span class="line">    ;;</span><br><span class="line">    stop)</span><br><span class="line">        stop_repeater</span><br><span class="line">    ;;</span><br><span class="line">    restart)</span><br><span class="line">        stop_repeater</span><br><span class="line">        start_repeater</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h3 id="wpa-supplicant-conf-配置文件"><a href="#wpa-supplicant-conf-配置文件" class="headerlink" title="wpa_supplicant.conf 配置文件"></a>wpa_supplicant.conf 配置文件</h3><p>WiFi 不同加密模式的 wpa_supplicant.conf 配置文件不同。</p><p><strong>WPA、WPA2、WPA/WPA2 加密模式：</strong><br><figure class="highlight plain"><figcaption><span>wpa_supplicant.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=/var/run/wpa_supplicant</span><br><span class="line">ctrl_interface_group=0</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;wifi的ssid&quot;</span><br><span class="line">proto=RSN WPA</span><br><span class="line">psk=&quot;wifi的密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>WEP 加密模式：</strong><br><figure class="highlight plain"><figcaption><span>wpa_supplicant.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=/var/run/wpa_supplicant</span><br><span class="line">ctrl_interface_group=0</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">key_mgmt=NONE</span><br><span class="line">auth_alg=SHARED</span><br><span class="line">wep_tx_keyidx=0</span><br><span class="line">ssid=&quot;wifi的ssid&quot;</span><br><span class="line">wep_key0=&quot;wep共享密钥&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>OPEN 模式：</strong><br><figure class="highlight plain"><figcaption><span>wpa_supplicant.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=/var/run/wpa_supplicant</span><br><span class="line">ctrl_interface_group=0</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">key_mgmt=NONE</span><br><span class="line">ssid=&quot;wifi的ssid&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>wpa_supplicant.conf</code> 的配置可以参考 <a href="https://www.freebsd.org/cgi/man.cgi?query=wpa_supplicant.conf&amp;sektion=5&amp;apropos=0&amp;manpath=FreeBSD+11.1-RELEASE+and+Ports" target="_blank" rel="noopener">wpa_supplicant.conf(5)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的某个项目需要做WiFi中继，使用的WiFi芯片是 Realtek 的 rtl8192es。&lt;br&gt;为了方便用户，还需要做搜索附近wifi的功能。这里只做后台，web前端就不写了。&lt;/p&gt;
&lt;p&gt;安装rtl8192es驱动后，至少会出现两接口 &lt;code&gt;wlan0&lt;/code&gt; 和 &lt;code&gt;wlan0-vxd&lt;/code&gt;。&lt;br&gt;其中 &lt;code&gt;wlan0&lt;/code&gt; 做AP，&lt;code&gt;wlan0-vxd&lt;/code&gt; 做STA。&lt;/p&gt;
&lt;h3 id=&quot;配置-wlan0-vxd&quot;&gt;&lt;a href=&quot;#配置-wlan0-vxd&quot; class=&quot;headerlink&quot; title=&quot;配置 wlan0-vxd&quot;&gt;&lt;/a&gt;配置 wlan0-vxd&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IFNAME=wlan0-vxd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iwpriv $IFNAME copy_mib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iwpriv $IFNAME set_mib opmode=8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ifconfig $IFNAME hw ether 00:e0:4c:01:f0:17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="rtl8192es" scheme="http://yoursite.com/tags/rtl8192es/"/>
    
      <category term="wpa_supplicant" scheme="http://yoursite.com/tags/wpa-supplicant/"/>
    
  </entry>
  
  <entry>
    <title>Python虚拟环境</title>
    <link href="http://yoursite.com/notes/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/20180605.html"/>
    <id>http://yoursite.com/notes/Python虚拟环境/20180605.html</id>
    <published>2018-06-05T09:39:55.000Z</published>
    <updated>2018-06-05T09:41:51.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用Python虚拟环境的原因"><a href="#使用Python虚拟环境的原因" class="headerlink" title="使用Python虚拟环境的原因"></a>使用Python虚拟环境的原因</h3><p>由于不同的Python项目可能会使用相同Python包的不同版本，这可能会给开发带来一些问题。<br>所以使用Python虚拟环境将不同项目需要的Python环境隔离开来。</p><a id="more"></a><p>一般的Python系统模块安装在 <strong>sys.prefix</strong> 环境变量指定的目录中：</p><p><img src="/images/Python-env-1.jpg" alt="Python-env-1.jpg"></p><p>使用 <code>pip</code> 或 <code>easy_install</code> 安装的第三方模块安装在 <strong>site-packages</strong> 目录中：</p><p><img src="/images/Python-env-2.jpg" alt="Python-env-2.jpg"></p><h3 id="Python虚拟环境的创建"><a href="#Python虚拟环境的创建" class="headerlink" title="Python虚拟环境的创建"></a>Python虚拟环境的创建</h3><p>可以使用 <strong>virtualenv</strong> 或 <strong>pyvenv</strong> 创建Python虚拟环境</p><p>如果是Python 2，可以使用 <code>pip</code> 安装 <strong>virtualenv</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br></pre></td></tr></table></figure><p>如果是Python 3，它已默认安装了 pyvenv。</p><p><strong>virtualenv</strong> 和 <strong>pyvenv</strong> 的使用方法是类似的。我使用的Python 3，就用 pyvenv 创建</p><p>创建存放Python虚拟环境的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir python-env</span><br><span class="line"><span class="built_in">cd</span> python-env</span><br></pre></td></tr></table></figure><p>假设为项目A创建虚拟环境：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyvenv project-A-env</span><br></pre></td></tr></table></figure></p><p>或<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv project-A-env</span><br></pre></td></tr></table></figure></p><blockquote><p>执行上面的命令之后会在当前目录下创建 project-A-env 目录<br>目录结构：<br><img src="/images/Python-env-3.jpg" alt="Python-env-3.jpg"></p></blockquote><p>使用虚拟环境 project-A-env：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> project-A-env/bin/activate</span><br></pre></td></tr></table></figure><p>现在就可以在这个虚拟环境中安装需要的模块。</p><p>退出虚拟环境：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p><h3 id="虚拟环境的原理"><a href="#虚拟环境的原理" class="headerlink" title="虚拟环境的原理"></a>虚拟环境的原理</h3><p>通过查看 <code>project-A-env/bin/activate</code> 文件，可以发现它是通过改变环境变量来操作的。<br>尤其是 <code>PATH</code> 变量。</p><p><strong>PATH</strong> 在非虚拟环境的值和虚拟环境中的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/lib64/qt-3.3/bin:/home/lihuanhui/perl5/bin:/usr/<span class="built_in">local</span>/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/home/lihuanhui/.<span class="built_in">local</span>/bin:/home/lihuanhui/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> project-A-env/bin/activate</span><br><span class="line">(project-A-env) [lihuanhui@localhost python-env]$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/home/lihuanhui/python-env/project-A-env/bin:/usr/lib64/qt-3.3/bin:/home/lihuanhui/perl5/bin:/usr/<span class="built_in">local</span>/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/home/lihuanhui/.<span class="built_in">local</span>/bin:/home/lihuanhui/bin</span><br></pre></td></tr></table></figure><p>python3 在非虚拟环境中的路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python3</span><br><span class="line">/home/lihuanhui/.<span class="built_in">local</span>/bin/python3</span><br></pre></td></tr></table></figure><p>python3 在虚拟环境中的路径：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python3</span><br><span class="line">/home/lihuanhui/python-env/project-A-env/bin/python3</span><br></pre></td></tr></table></figure></p><p>因为系统搜索应用路径的顺序是根据 <code>PATH</code> 变量值中的顺序来的，越前越先被搜索。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用Python虚拟环境的原因&quot;&gt;&lt;a href=&quot;#使用Python虚拟环境的原因&quot; class=&quot;headerlink&quot; title=&quot;使用Python虚拟环境的原因&quot;&gt;&lt;/a&gt;使用Python虚拟环境的原因&lt;/h3&gt;&lt;p&gt;由于不同的Python项目可能会使用相同Python包的不同版本，这可能会给开发带来一些问题。&lt;br&gt;所以使用Python虚拟环境将不同项目需要的Python环境隔离开来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>收集的一些个人网站</title>
    <link href="http://yoursite.com/notes/friend-link/20180605.html"/>
    <id>http://yoursite.com/notes/friend-link/20180605.html</id>
    <published>2018-06-05T09:30:56.000Z</published>
    <updated>2018-06-05T09:36:45.413Z</updated>
    
    <content type="html"><![CDATA[<p>这些网站是我在查找资料时找到的，都是很不错的网站，所以记了下来，时不时逛一逛。如有违愿，告知立即删除。</p><a id="more"></a><h3 id="linux、网络、应用"><a href="#linux、网络、应用" class="headerlink" title="linux、网络、应用"></a>linux、网络、应用</h3><ul><li><strong>包含很多linux方方面面，很不错!!</strong> <a href="http://cxd2014.github.io/" target="_blank" rel="noopener">http://cxd2014.github.io/</a></li></ul><h3 id="黑客、网络攻击"><a href="#黑客、网络攻击" class="headerlink" title="黑客、网络攻击"></a>黑客、网络攻击</h3><ul><li><strong>wifi破解，网络攻击等!!</strong> <a href="http://topspeedsnail.com/" target="_blank" rel="noopener">http://topspeedsnail.com/</a>  <strong>ta的Daily Blog</strong> <a href="http://blog.topspeedsnail.com/" target="_blank" rel="noopener">斗大的熊猫</a></li></ul><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ul><li><strong>数据挖掘、机器学习</strong> <a href="www.lining0806.com">宁哥的小站</a></li></ul><p><br style="border: 1px solid;"><br><strong>别人整理的资源，各种资源都有</strong> <a href="http://lyfeyaj.github.io/awesome-resources/" target="_blank" rel="noopener">大合集</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这些网站是我在查找资料时找到的，都是很不错的网站，所以记了下来，时不时逛一逛。如有违愿，告知立即删除。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker入门</title>
    <link href="http://yoursite.com/notes/docker%E5%85%A5%E9%97%A8/20180605.html"/>
    <id>http://yoursite.com/notes/docker入门/20180605.html</id>
    <published>2018-06-05T09:09:37.000Z</published>
    <updated>2018-06-05T09:13:47.765Z</updated>
    
    <content type="html"><![CDATA[<p>本篇入门是根据<a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker官方文档</a>中<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">Get started with Docker</a>执行的，自己的操作记录还有一些翻译.</p><p><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>是开发人员和系统管理员使用容器开发，部署和运行应用程序的平台。<br>使用Linux容器来部署应用程序称为集装箱化。 容器不是新的，但它们用于轻松部署应用程序。<br>参考这一篇文章 <a href="https://zhuanlan.zhihu.com/p/23599229" target="_blank" rel="noopener">只要一小时，零基础入门Docker</a></p><a id="more"></a><h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><p>根据自己的系统下载相应的版本. <a href="https://docs.docker.com/install/" target="_blank" rel="noopener">Install Docker</a>, 我的是win10, 所以下载的Windows版本, 下载完后正常安装即可.</p><h4 id="安装完后，可以看一下docker的版本"><a href="#安装完后，可以看一下docker的版本" class="headerlink" title="安装完后，可以看一下docker的版本"></a>安装完后，可以看一下docker的版本</h4><p>用管理员权限打开Power Shell，用cmd也是一样的.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker --version</span><br><span class="line">Docker version 17.12.0-ce, build c97c6d6</span><br></pre></td></tr></table></figure></p><h4 id="运行docker-version-或-docker-info-看详细信息"><a href="#运行docker-version-或-docker-info-看详细信息" class="headerlink" title="运行docker version 或 docker info 看详细信息"></a>运行<code>docker version</code> 或 <code>docker info</code> 看详细信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker info</span><br><span class="line">Containers: 5</span><br><span class="line"> Running: 3</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 2</span><br><span class="line">Images: 3</span><br><span class="line">Server Version: 17.12.1-ce</span><br><span class="line">Storage Driver: aufs</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="测试Docker安装"><a href="#测试Docker安装" class="headerlink" title="测试Docker安装"></a>测试Docker安装</h4><p>通过运行简单的Docker镜像来测试安装是否工作正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker run hello-world</span><br><span class="line">Unable to find image &apos;hello-world:latest&apos; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:083de497cff944f969d8499ab94f07134c50bcf5e6b9559b27182d3fa80ce3f7</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>列出已下载的镜像:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker image ls</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world              latest              f2a91732366c        3 months ago        1.85kB</span><br></pre></td></tr></table></figure></p><p>列出存在的容器，如果容器正在运行可不加 <code>--all</code> 选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker container ls --all</span><br><span class="line">CONTAINER ID        IMAGE                          COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">eda79c42ec80        hello-world                    &quot;/hello&quot;            7 minutes ago       Exited (0) 7 minutes ago                        gifted_booth</span><br></pre></td></tr></table></figure></p><h4 id="回顾并作表"><a href="#回顾并作表" class="headerlink" title="回顾并作表"></a>回顾并作表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## List Docker CLI commands</span><br><span class="line">docker</span><br><span class="line">docker container --help</span><br><span class="line"></span><br><span class="line">## Display Docker version and info</span><br><span class="line">docker --version</span><br><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line">## Excecute Docker image</span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">## List Docker images</span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line">## List Docker containers (running, all, all in quiet mode)</span><br><span class="line">docker container ls</span><br><span class="line">docker container ls --all</span><br><span class="line">docker container ls -a -q</span><br></pre></td></tr></table></figure><h3 id="Part-2-Containers"><a href="#Part-2-Containers" class="headerlink" title="Part 2:Containers"></a>Part 2:Containers</h3><h4 id="通过-Dockerfile-创建镜像"><a href="#通过-Dockerfile-创建镜像" class="headerlink" title="通过 Dockerfile 创建镜像"></a>通过 <code>Dockerfile</code> 创建镜像</h4><p>创建一个空文件夹(我创建目录是Docker)，并切换到该文件夹下，创建一个叫 Dockerfile 的文件，文件内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Use an official Python runtime as a parent image</span><br><span class="line">FROM python:2.7-slim</span><br><span class="line"></span><br><span class="line"># Set the working directory to /app</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># Copy the current directory contents into the container at /app</span><br><span class="line">ADD . /app</span><br><span class="line"></span><br><span class="line"># Install any needed packages specified in requirements.txt</span><br><span class="line">RUN pip install --trusted-host pypi.python.org -r requirements.txt</span><br><span class="line"></span><br><span class="line"># Make port 80 available to the world outside this container</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># Define environment variable</span><br><span class="line">ENV NAME World</span><br><span class="line"></span><br><span class="line"># Run app.py when the container launches</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure></p><p>这个 <code>Dockerfile</code> 引用的两个文件 <code>app.py</code> 和 <code>requirements.txt</code> 我们也要创建.<br><code>requirements.txt</code> 和 <code>app.py</code> 要跟 <code>Dockerfile</code> 在同一目录下.</p><p><code>requirements.txt</code> 内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure></p><p><code>app.py</code> 内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis, RedisError</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to Redis</span></span><br><span class="line">redis = Redis(host=<span class="string">"redis"</span>, db=<span class="number">0</span>, socket_connect_timeout=<span class="number">2</span>, socket_timeout=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        visits = redis.incr(<span class="string">"counter"</span>)</span><br><span class="line">    <span class="keyword">except</span> RedisError:</span><br><span class="line">        visits = <span class="string">"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;"</span></span><br><span class="line"></span><br><span class="line">    html = <span class="string">"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;"</span> \</span><br><span class="line">           <span class="string">"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;"</span> \</span><br><span class="line">           <span class="string">"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;"</span></span><br><span class="line">    <span class="keyword">return</span> html.format(name=os.getenv(<span class="string">"NAME"</span>, <span class="string">"world"</span>), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure></p><h4 id="构建app"><a href="#构建app" class="headerlink" title="构建app"></a>构建app</h4><p>现在创建的目录下的文件有：<br><img src="/images/docker-part2-1.jpg" alt="docker-part2-1.jpg"></p><p>现在运行构建命令，这将创建一个Docker镜像，我们使用 <code>-t</code> 选项来标记它.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyhello .</span><br></pre></td></tr></table></figure></p><p>查看本地Docker镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker image ls</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">friendlyhello            latest              bde374d2c5c0        27 hours ago        148MB</span><br></pre></td></tr></table></figure></p><h4 id="运行app"><a href="#运行app" class="headerlink" title="运行app"></a>运行app</h4><p>运行此app，使用 <code>-p</code> 选项，映射你电脑的4000端口到容器的公开端口80：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure></p><p>运行的输出如下：<br><img src="/images/docker-part2-2.jpg" alt="docker-part2-2.jpg"></p><p>你会看到Python服务在 <code>http://0.0.0.0:80</code> 的信息，但是这个信息是来自内部容器的，它不知道我们已经把80端口映射到4000端口了，所以正确的URL是 <code>http://localhost:4000</code>。</p><p>到浏览器中输入URL后显示的内容：<br><img src="/images/docker-part2-3.jpg" alt="docker-part2-3.jpg"></p><p>在终端中按 <code>CTRL+C</code> 进行退出。<br>但在Windows系统中，<code>CTRL+C</code> 是不能停止容器的。所以首先按 <code>CTRL+C</code> 回到提示符（或者打开另一个终端），然后输入 <code>docker container ls</code> 列出正在运行的容器，<br>然后执行 <code>docker container stop &lt;Container NAME or ID&gt;</code> 停止容器。</p><p>后台运行app：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure></p><p>你会看到一个很长的容器ID, 也可以执行 <code>docker container ls</code> 获得简化的容器ID。<br><img src="/images/docker-part2-4.jpg" alt="docker-part2-4.jpg"></p><p>可以注意到 <code>CONTAINER ID</code> 和 <code>http://localhost:4000</code> 上的Hostname是匹配的。</p><p>使用 <code>docker container stop</code> 停止进程，这里使用 <code>CONTAINER ID</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop ecb05580cad7</span><br></pre></td></tr></table></figure></p><h4 id="分享你的镜像"><a href="#分享你的镜像" class="headerlink" title="分享你的镜像"></a>分享你的镜像</h4><p>(1) 到<a href="/https://cloud.docker.com">cloud.docker.com</a>注册一个账号。</p><p>(2) 在终端执行 <code>docker login</code> , 根据提示输入用户名、密码即可登录。</p><p><strong>标记镜像</strong><br>推荐的名称形式是 <code>username/repository:tag</code> 。<br>语法形式：<code>docker tag image username/repository:tag</code><br>example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag friendlyhello googolprex/get-started:part2</span><br></pre></td></tr></table></figure></p><p>运行 <code>docker image ls</code> 查看本地镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker image ls</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">googolprex/get-started   part2               bde374d2c5c0        47 hours ago        148MB</span><br><span class="line">friendlyhello            latest              bde374d2c5c0        47 hours ago        148MB</span><br><span class="line">python                   2.7-slim            52ad41c7aea4        2 weeks ago         139MB</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>(3) 推送本地镜像到<a href="https://hub.docker.com" target="_blank" rel="noopener">Docker Hub</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push googolprex/get-started:part2</span><br></pre></td></tr></table></figure></p><p>(4) 现在就可在任何地方下载你的镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull googolprex/get-started:part2</span><br></pre></td></tr></table></figure></p><p>或下载并运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 googolprex/get-started:part2</span><br></pre></td></tr></table></figure></p><h3 id="Part-3-Services"><a href="#Part-3-Services" class="headerlink" title="Part 3: Services"></a>Part 3: Services</h3><h4 id="创建-docker-compose-yml-文件"><a href="#创建-docker-compose-yml-文件" class="headerlink" title="创建 docker-compose.yml 文件"></a>创建 docker-compose.yml 文件</h4><p><code>docker-compose.yml</code> 文件定义了Docker 容器的行为。<br>文件内容如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line">    <span class="comment"># replace username/repo:tag with your name and image details</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">googolprex/get-started:part2</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        limits:</span></span><br><span class="line"><span class="attr">          cpus:</span> <span class="string">"0.1"</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="number">50</span><span class="string">M</span></span><br><span class="line"><span class="attr">      restart_policy:</span></span><br><span class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  webnet:</span></span><br></pre></td></tr></table></figure></p><h4 id="运行此Services"><a href="#运行此Services" class="headerlink" title="运行此Services"></a>运行此Services</h4><p>(1) 设置 <code>swarm manager</code> 节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure></p><p>(2) 运行并设置app名为 <code>getstartedlab</code> ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure></p><p>这个服务栈运行5个容器实例</p><p>查看service ID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                          PORTS</span><br><span class="line">okrfhvests38        getstartedlab_web   replicated          5/5                 googolprex/get-started:part2   *:80-&gt;80/tcp</span><br></pre></td></tr></table></figure></p><p>你会发现NAME这一栏是 <code>getstartedlab_web</code>，它是app名拼接上服务名。</p><p>查看每个服务有多少个任务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker service ps getstartedlab_web</span><br><span class="line">ID                  NAME                  IMAGE                          NODE                    DESIRED STATE       CURRENT STATE            ERROR               PORTS</span><br><span class="line">m560wuq5jhvx        getstartedlab_web.1   googolprex/get-started:part2   linuxkit-00155d01d801   Running             Running 10 minutes ago</span><br><span class="line">vf8nr4rondmq        getstartedlab_web.2   googolprex/get-started:part2   linuxkit-00155d01d801   Running             Running 10 minutes ago</span><br><span class="line">w90dhgndqppj        getstartedlab_web.3   googolprex/get-started:part2   linuxkit-00155d01d801   Running             Running 10 minutes ago</span><br><span class="line">h6j4tojq8asw        getstartedlab_web.4   googolprex/get-started:part2   linuxkit-00155d01d801   Running             Running 10 minutes ago</span><br><span class="line">4odlyrbirqod        getstartedlab_web.5   googolprex/get-started:part2   linuxkit-00155d01d801   Running             Running 10 minutes ago</span><br></pre></td></tr></table></figure></p><p>查看正在运行的容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker container ls</span><br><span class="line">CONTAINER ID        IMAGE                          COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">4ce2cd22d3dd        googolprex/get-started:part2   &quot;python app.py&quot;     13 minutes ago      Up 13 minutes       80/tcp              getstartedlab_web.1.m560wuq5jhvxdxslfr8degpy7</span><br><span class="line">5651249e9614        googolprex/get-started:part2   &quot;python app.py&quot;     13 minutes ago      Up 13 minutes       80/tcp              getstartedlab_web.4.h6j4tojq8asw1foirs6txor7m</span><br><span class="line">2b703c563cbd        googolprex/get-started:part2   &quot;python app.py&quot;     13 minutes ago      Up 13 minutes       80/tcp              getstartedlab_web.3.w90dhgndqppj6bfros0gpdud3</span><br><span class="line">ce18f72faffa        googolprex/get-started:part2   &quot;python app.py&quot;     13 minutes ago      Up 13 minutes       80/tcp              getstartedlab_web.2.vf8nr4rondmqjmimmwpde9kwp</span><br><span class="line">a370a86ec193        googolprex/get-started:part2   &quot;python app.py&quot;     13 minutes ago      Up 13 minutes       80/tcp              getstartedlab_web.5.4odlyrbirqodr4ufgjzmb5xer</span><br></pre></td></tr></table></figure></p><p>在浏览器上输入 <code>http://localhost</code> ：<br><img src="/images/docker-part3-1.jpg" alt="docker-part3-1.jpg"></p><p>若修改了 <code>docker-compose.yml</code> 文件，重新运行即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure></p><p>(3) 关闭app和swarm</p><p>关闭app：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack rm getstartedlab</span><br></pre></td></tr></table></figure></p><p>关闭swarm：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm leave --force</span><br></pre></td></tr></table></figure></p><h3 id="Part4-Swarms"><a href="#Part4-Swarms" class="headerlink" title="Part4: Swarms"></a>Part4: Swarms</h3><h4 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h4><p>(1) <strong>创建虚拟交换机</strong><br>不同操作系统创建的方法不一样，我的是win10，按win10的方法创建：<br><img src="/images/docker-part4-1.jpg" alt="docker-part4-1.jpg"></p><p>(2) <strong>创建虚拟机</strong><br>创建2个虚拟机myvm1、myvm2 并使用上一步创建的交换机”myswitch”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch &quot;myswitch&quot; myvm1</span><br><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch &quot;myswitch&quot; myvm2</span><br></pre></td></tr></table></figure></p><p><strong>查看虚拟机的IP地址</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker-machine ls</span><br><span class="line">NAME    ACTIVE   DRIVER   STATE     URL                        SWARM   DOCKER        ERRORS</span><br><span class="line">myvm1   -        hyperv   Running   tcp://192.168.1.228:2376           v17.12.1-ce</span><br><span class="line">myvm2   -        hyperv   Running   tcp://192.168.1.230:2376           v17.12.1-ce</span><br></pre></td></tr></table></figure></p><h4 id="初始化swarm"><a href="#初始化swarm" class="headerlink" title="初始化swarm"></a>初始化swarm</h4><p><code>myvm1</code> 作为swarm manager, <code>myvm2</code> 作为 worker 加入 swarm.</p><p><strong>myvm1 作为swarm manager：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker-machine ssh myvm1 &quot;docker swarm init --advertise-addr 192.168.1.228&quot;</span><br><span class="line">Swarm initialized: current node (4ze8fmc9r40vt93dxrq2t9ism) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-0w1gmhcsvbfr99yzb7mnx8lo1eyh4irkulki3k21i5cbywt5u9-682g19v43mkhw8e2t1jw9xf60 192.168.1.228:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</span><br></pre></td></tr></table></figure></p><p><strong>myvm2 作为 worker 加入 swarm：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker-machine ssh myvm2 &quot;docker swarm join --token SWMTKN-1-0w1gmhcsvbfr99yzb7mnx8lo1eyh4irkulki3k21i5cbywt5u9-682g19v43mkhw8e2t1jw9xf60 192.168.1.228:2377&quot;</span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure></p><p>swarm 已经创建完成了，在swarm manager上运行<code>docker node ls</code> 查看swarm的节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker-machine ssh myvm1 &quot;docker node ls&quot;</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS</span><br><span class="line">4ze8fmc9r40vt93dxrq2t9ism *   myvm1               Ready               Active              Leader</span><br><span class="line">5qh5401pl422vmd2wzqlvq7l2     myvm2               Ready               Active</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>离开swarm</strong><br>在节点上运行 <code>docker swarm leave</code> 即可脱离swarm.</p></blockquote><h4 id="部署app到swarm"><a href="#部署app到swarm" class="headerlink" title="部署app到swarm"></a>部署app到swarm</h4><p>(1) <em>Configure a <code>docker-machine</code> shell to the swarm manager</em><br>在上面我们执行的一些命令是通过 <code>docker-machine ssh</code> 和虚拟机交互的。<br>另一种选择是运行 <code>docker-machine env &lt;machine&gt;</code> 去获得并运行一条指令使当前终端可与虚拟机直接交互。<br>这种方法在下面的步骤中有很多方便，因为它可以使用你本地的 <code>docker-compose.yml</code> 文件去部署app到”远程”而不必拷贝这个文件。</p><p>执行 <code>docker-machine env myvm1</code> ,然后运行此命令的最后一条输出，使当前终端与 <code>myvm1</code> 交互。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker-machine env myvm1</span><br><span class="line">$Env:DOCKER_TLS_VERIFY = &quot;1&quot;</span><br><span class="line">$Env:DOCKER_HOST = &quot;tcp://192.168.1.228:2376&quot;</span><br><span class="line">$Env:DOCKER_CERT_PATH = &quot;C:\Users\googol\.docker\machine\machines\myvm1&quot;</span><br><span class="line">$Env:DOCKER_MACHINE_NAME = &quot;myvm1&quot;</span><br><span class="line">$Env:COMPOSE_CONVERT_WINDOWS_PATHS = &quot;true&quot;</span><br><span class="line"># Run this command to configure your shell:</span><br><span class="line"># &amp; &quot;C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe&quot; env myvm1 | Invoke-Expression</span><br></pre></td></tr></table></figure></p><p>运行它给出的命令，配置当前终端与 <code>myvm1</code> 交互。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; &quot;C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe&quot; env myvm1 | Invoke-Expression</span><br></pre></td></tr></table></figure></p><p>执行 <code>docker-machine ls</code> 可以确认当前终端是否与 <code>myvm1</code> 交互，myvm1 的 ACTIVE 栏是个 <code>*</code> 号，说明当前终端与myvm1交互。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker-machine ls</span><br><span class="line">NAME    ACTIVE   DRIVER   STATE     URL                        SWARM   DOCKER        ERRORS</span><br><span class="line">myvm1   *        hyperv   Running   tcp://192.168.1.228:2376           v17.12.1-ce</span><br><span class="line">myvm2   -        hyperv   Running   tcp://192.168.1.230:2376           v17.12.1-ce</span><br></pre></td></tr></table></figure></p><p>(2) <strong>部署app到swarm</strong><br>跟上面的Part 3部分差不多，<code>docker-compose.yml</code> 文件就是part 3时创建的文件，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure></p><p>执行 <code>docker stack ps getstartedlab</code> 查看服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker stack ps getstartedlab</span><br><span class="line">ID                  NAME                  IMAGE                          NODE                DESIRED STATE       CURRENT STATE                  ERROR               PORTS</span><br><span class="line">nfprf3rrwjwj        getstartedlab_web.1   googolprex/get-started:part2   myvm1               Running             Preparing about a minute ago</span><br><span class="line">jj7kh9fbpmks        getstartedlab_web.2   googolprex/get-started:part2   myvm2               Running             Preparing about a minute ago</span><br><span class="line">mj2nawupx3af        getstartedlab_web.3   googolprex/get-started:part2   myvm1               Running             Preparing about a minute ago</span><br><span class="line">jkpy7pvow7yw        getstartedlab_web.4   googolprex/get-started:part2   myvm2               Running             Preparing about a minute ago</span><br><span class="line">uy0lzogmksdv        getstartedlab_web.5   googolprex/get-started:part2   myvm2               Running             Preparing about a minute ago</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看到<code>DESIRED STATE</code>栏是Running, <code>CURRENT STATE</code>栏是Preparing about a minute ago<br>说明当前正在启动，还没启动完成。所以这时候在浏览器输入 myvm1 或 myvm2 的IP地址是打开网页失败的。</p></blockquote><p>用 <code>docker service ls</code> 查看就更直观了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                          PORTS</span><br><span class="line">osdkujqjhioj        getstartedlab_web   replicated          0/5                 googolprex/get-started:part2   *:80-&gt;80/tcp</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看出5个副本还没有一个启动完成。</p></blockquote><p>这样等待了二十多分钟后，查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker stack ps getstartedlab</span><br><span class="line">ID                  NAME                  IMAGE                          NODE                DESIRED STATE       CURRENT STATE              ERROR               PORTS</span><br><span class="line">nfprf3rrwjwj        getstartedlab_web.1   googolprex/get-started:part2   myvm1               Running             Running 5 minutes ago</span><br><span class="line">jj7kh9fbpmks        getstartedlab_web.2   googolprex/get-started:part2   myvm2               Running             Preparing 26 minutes ago</span><br><span class="line">mj2nawupx3af        getstartedlab_web.3   googolprex/get-started:part2   myvm1               Running             Running 5 minutes ago</span><br><span class="line">jkpy7pvow7yw        getstartedlab_web.4   googolprex/get-started:part2   myvm2               Running             Preparing 26 minutes ago</span><br><span class="line">uy0lzogmksdv        getstartedlab_web.5   googolprex/get-started:part2   myvm2               Running             Preparing 26 minutes ago</span><br><span class="line">PS E:\Docker&gt; docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                          PORTS</span><br><span class="line">osdkujqjhioj        getstartedlab_web   replicated          2/5                 googolprex/get-started:part2   *:80-&gt;80/tcp</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看到<code>myvm1</code>节点的服务已经率先启动完成了。<br><code>myvm2</code>节点不久后也启动好了，这里就不再列出来了。</p></blockquote><p>在浏览器输入 <code>myvm1</code> 或 <code>myvm2</code> 的地址：<br><img src="/images/docker-part4-2.jpg" alt="docker-part4-2.jpg"><br><img src="/images/docker-part4-3.jpg" alt="docker-part4-3.jpg"></p><p>停止app：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack rm getstartedlab</span><br></pre></td></tr></table></figure></p><p><strong>断开当前终端与 <code>myvm1</code> 的交互：</strong><br>执行 <code>docker-machine env -u</code> ，然后根据提示执行最后一条指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Docker&gt; docker-machine env -u</span><br><span class="line">Remove-Item Env:\\DOCKER_TLS_VERIFY</span><br><span class="line">Remove-Item Env:\\DOCKER_HOST</span><br><span class="line">Remove-Item Env:\\DOCKER_CERT_PATH</span><br><span class="line">Remove-Item Env:\\DOCKER_MACHINE_NAME</span><br><span class="line"># Run this command to configure your shell:</span><br><span class="line"># &amp; &quot;C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe&quot; env -u | Invoke-Expression</span><br><span class="line">PS E:\Docker&gt; &amp; &quot;C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe&quot; env -u | Invoke-Expression</span><br></pre></td></tr></table></figure></p><p><strong>启动和关闭Docker 虚拟机的命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-machine start &lt;machine-name&gt;</span><br><span class="line">docker-machine stop &lt;machine-name&gt;</span><br></pre></td></tr></table></figure></p><p>Part5 和 Part6就不翻译了，跟着文档做，入门还是很简单的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇入门是根据&lt;a href=&quot;https://docs.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker官方文档&lt;/a&gt;中&lt;a href=&quot;https://docs.docker.com/get-started/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Get started with Docker&lt;/a&gt;执行的，自己的操作记录还有一些翻译.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker&lt;/a&gt;是开发人员和系统管理员使用容器开发，部署和运行应用程序的平台。&lt;br&gt;使用Linux容器来部署应用程序称为集装箱化。 容器不是新的，但它们用于轻松部署应用程序。&lt;br&gt;参考这一篇文章 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/23599229&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;只要一小时，零基础入门Docker&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Makefile内置函数使用</title>
    <link href="http://yoursite.com/notes/Makefile%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/20180605.html"/>
    <id>http://yoursite.com/notes/Makefile内置函数使用/20180605.html</id>
    <published>2018-06-05T08:58:41.000Z</published>
    <updated>2018-06-05T09:06:26.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数的调用语法"><a href="#函数的调用语法" class="headerlink" title="函数的调用语法"></a>函数的调用语法</h3><p>函数调用，很像变量的使用，也是以“$”来标识的，其语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&lt;function&gt; &lt;arguments&gt;)</span><br></pre></td></tr></table></figure></p><p>或是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&lt;function&gt; &lt;arguments&gt;&#125;</span><br></pre></td></tr></table></figure></p><p>这里，<code>&lt;function&gt;</code>就是函数名，make 支持的函数不多。<code>&lt;arguments&gt;</code>是函数的参数，参数间<br>以逗号“,”分隔，而函数名和参数之间以“空格”分隔。函数调用以“$”开头，以圆括号<br>或花括号把函数名和参数括起。感觉很像一个变量，是不是？函数中的参数可以使用变量，<br>为了风格的统一，函数和变量的括号最好一样，如使用“$(subst a,b,$(x))”这样的形式，<br>而不是“$(subst a,b,${x})”的形式。因为统一会更清楚，也会减少一些不必要的麻烦。</p><p>还是来看一个示例：</p><p>comma:= ,<br>empty:=<br>space:= $(empty) $(empty)<br>foo:= a b c<br>bar:= $(subst $(space),$(comma),$(foo))</p><p>在这个示例中，$(comma)的值是一个逗号。$(space)使用了$(empty)定义了一个空格，$(foo)<br>的值是“a b c”，$(bar)的定义用，调用了函数“subst”，这是一个替换函数，这个函数<br>有三个参数，第一个参数是被替换字串，第二个参数是替换字串，第三个参数是替换操作作<br>用的字串。这个函数也就是把$(foo)中的空格替换成逗号，所以$(bar)的值是“a,b,c”。</p><a id="more"></a><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><h4 id="subst"><a href="#subst" class="headerlink" title="subst"></a>subst</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</span><br><span class="line"></span><br><span class="line">名称：字符串替换函数——subst。</span><br><span class="line">功能：把字串&lt;text&gt;中的&lt;from&gt;字符串替换成&lt;to&gt;。</span><br><span class="line">返回：函数返回被替换过后的字符串。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">$(subst ee,EE,feet on the street)</span><br><span class="line"></span><br><span class="line">把“feet on the street”中的“ee”替换成“EE”，返回结果是“fEEt on the</span><br><span class="line">strEEt”。</span><br></pre></td></tr></table></figure><h4 id="patsubst"><a href="#patsubst" class="headerlink" title="patsubst"></a>patsubst</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</span><br><span class="line"></span><br><span class="line">名称：模式字符串替换函数——patsubst。</span><br><span class="line">功能：查找&lt;text&gt;中的单词（单词以“空格”、“Tab”或“回车”“换行”分隔）是否符</span><br><span class="line">合模式&lt;pattern&gt;，如果匹配的话，则以&lt;replacement&gt;替换。这里，&lt;pattern&gt;可以包括通</span><br><span class="line">配符“%”，表示任意长度的字串。如果&lt;replacement&gt;中也包含“%”，那么，&lt;replacement&gt;</span><br><span class="line">中的这个“%”将是&lt;pattern&gt;中的那个“%”所代表的字串。（可以用“\”来转义，以“\%”</span><br><span class="line">来表示真实含义的“%”字符）</span><br><span class="line">返回：函数返回被替换过后的字符串。</span><br><span class="line">示例：</span><br><span class="line">$(patsubst %.c,%.o,x.c.c bar.c)</span><br><span class="line">把字串“x.c.c bar.c”符合模式[%.c]的单词替换成[%.o]，返回结果是“x.c.o bar.o”</span><br><span class="line"></span><br><span class="line">备注：</span><br><span class="line">这和我们前面“变量章节”说过的相关知识有点相似。</span><br><span class="line">如：</span><br><span class="line">“$(var:&lt;pattern&gt;=&lt;replacement&gt;)”</span><br><span class="line">相当于</span><br><span class="line">“$(patsubst &lt;pattern&gt;,&lt;replacement&gt;,$(var))”，</span><br><span class="line">而“$(var: &lt;suffix&gt;=&lt;replacement&gt;)” 则相当于</span><br><span class="line">“$(patsubst %&lt;suffix&gt;,%&lt;replacement&gt;,$(var))”。</span><br><span class="line"></span><br><span class="line">例如有：objects = foo.o bar.o baz.o，</span><br><span class="line">那么，“$(objects:.o=.c)”和“$(patsubst %.o,%.c,$(objects))”是一样的。</span><br></pre></td></tr></table></figure><h4 id="stip"><a href="#stip" class="headerlink" title="stip"></a>stip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(strip &lt;string&gt;)</span><br><span class="line"></span><br><span class="line">名称：去空格函数——strip。</span><br><span class="line">功能：去掉&lt;string&gt;字串中开头和结尾的空字符。</span><br><span class="line">返回：返回被去掉空格的字符串值。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">$(strip a b c )</span><br><span class="line">把字串“a b c ”去到开头和结尾的空格，结果是“a b c”。</span><br></pre></td></tr></table></figure><h4 id="findstring"><a href="#findstring" class="headerlink" title="findstring"></a>findstring</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(findstring &lt;find&gt;,&lt;in&gt;)</span><br><span class="line"></span><br><span class="line">名称：查找字符串函数——findstring。</span><br><span class="line">功能：在字串&lt;in&gt;中查找&lt;find&gt;字串。</span><br><span class="line">返回：如果找到，那么返回&lt;find&gt;，否则返回空字符串。</span><br><span class="line">示例：</span><br><span class="line">$(findstring a,a b c)</span><br><span class="line">$(findstring a,b c)</span><br><span class="line">第一个函数返回“a”字符串，第二个返回“”字符串（空字符串）</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(filter &lt;pattern...&gt;,&lt;text&gt;)</span><br><span class="line">名称：过滤函数——filter。</span><br><span class="line">功能：以&lt;pattern&gt;模式过滤&lt;text&gt;字符串中的单词，保留符合模式&lt;pattern&gt;的单词。可以</span><br><span class="line">有多个模式。</span><br><span class="line">返回：返回符合模式&lt;pattern&gt;的字串。</span><br><span class="line">示例：</span><br><span class="line">sources := foo.c bar.c baz.s ugh.h</span><br><span class="line">foo: $(sources)</span><br><span class="line">cc $(filter %.c %.s,$(sources)) -o foo</span><br><span class="line">$(filter %.c %.s,$(sources))返回的值是“foo.c bar.c baz.s”。</span><br></pre></td></tr></table></figure><h4 id="filter-out"><a href="#filter-out" class="headerlink" title="filter-out"></a>filter-out</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(filter-out &lt;pattern...&gt;,&lt;text&gt;)</span><br><span class="line">名称：反过滤函数——filter-out。</span><br><span class="line">功能：以&lt;pattern&gt;模式过滤&lt;text&gt;字符串中的单词，去除符合模式&lt;pattern&gt;的单词。可以</span><br><span class="line">有多个模式。</span><br><span class="line">返回：返回不符合模式&lt;pattern&gt;的字串。</span><br><span class="line">示例：</span><br><span class="line">objects=main1.o foo.o main2.o bar.o</span><br><span class="line">mains=main1.o main2.o</span><br><span class="line">$(filter-out $(mains),$(objects)) 返回值是“foo.o bar.o”。</span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(sort &lt;list&gt;)</span><br><span class="line">名称：排序函数——sort。</span><br><span class="line">功能：给字符串&lt;list&gt;中的单词排序（升序）。</span><br><span class="line">返回：返回排序后的字符串。</span><br><span class="line">示例：$(sort foo bar lose)返回“bar foo lose” 。</span><br><span class="line">备注：sort 函数会去掉&lt;list&gt;中相同的单词。</span><br></pre></td></tr></table></figure><h4 id="word"><a href="#word" class="headerlink" title="word"></a>word</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(word &lt;n&gt;,&lt;text&gt;)</span><br><span class="line">名称：取单词函数——word。</span><br><span class="line">功能：取字符串&lt;text&gt;中第&lt;n&gt;个单词。（从一开始）</span><br><span class="line">返回：返回字符串&lt;text&gt;中第&lt;n&gt;个单词。如果&lt;n&gt;比&lt;text&gt;中的单词数要大，那么返</span><br><span class="line">回空字符串。</span><br><span class="line">示例：$(word 2, foo bar baz)返回值是“bar”。</span><br></pre></td></tr></table></figure><h4 id="worlist"><a href="#worlist" class="headerlink" title="worlist"></a>worlist</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(wordlist &lt;s&gt;,&lt;e&gt;,&lt;text&gt;)</span><br><span class="line"></span><br><span class="line">名称：取单词串函数——wordlist。</span><br><span class="line">功能：从字符串&lt;text&gt;中取从&lt;s&gt;开始到&lt;e&gt;的单词串。&lt;s&gt;和&lt;e&gt;是一个数字。</span><br><span class="line">返回：返回字符串&lt;text&gt;中从&lt;s&gt;到&lt;e&gt;的单词字串。如果&lt;s&gt;比&lt;text&gt;中的单词数要大，那</span><br><span class="line">么返回空字符串。如果&lt;e&gt;大于&lt;text&gt;的单词数，那么返回从&lt;s&gt;开始，到&lt;text&gt;结束的单词串。</span><br><span class="line">示例： $(wordlist 2, 3, foo bar baz)返回值是“bar baz”。</span><br></pre></td></tr></table></figure><h4 id="words"><a href="#words" class="headerlink" title="words"></a>words</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(words &lt;text&gt;)</span><br><span class="line">名称：单词个数统计函数——words。</span><br><span class="line">功能：统计&lt;text&gt;中字符串中的单词个数。</span><br><span class="line">返回：返回&lt;text&gt;中的单词数。</span><br><span class="line">示例：$(words, foo bar baz)返回值是“3”。</span><br><span class="line">备注：如果我们要取&lt;text&gt;中最后的一个单词，我们可以这样：</span><br><span class="line">$(word $(words &lt;text&gt;),&lt;text&gt;)</span><br></pre></td></tr></table></figure><h4 id="firstword"><a href="#firstword" class="headerlink" title="firstword"></a>firstword</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(firstword &lt;text&gt;)</span><br><span class="line">名称：首单词函数——firstword。</span><br><span class="line">功能：取字符串&lt;text&gt;中的第一个单词。</span><br><span class="line">返回：返回字符串&lt;text&gt;的第一个单词。</span><br><span class="line">示例：$(firstword foo bar)返回值是“foo”。</span><br><span class="line">备注：这个函数可以用 word 函数来实现：$(word 1,&lt;text&gt;)。</span><br></pre></td></tr></table></figure><h3 id="字符串函数实例"><a href="#字符串函数实例" class="headerlink" title="字符串函数实例"></a>字符串函数实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">以上，是所有的字符串操作函数，如果搭配混合使用，可以完成比较复杂的功能。这里，</span><br><span class="line">举一个现实中应用的例子。我们知道，make 使用“VPATH”变量来指定“依赖文件”的搜索</span><br><span class="line">路径。于是，我们可以利用这个搜索路径来指定编译器对头文件的搜索路径参数 CFLAGS，</span><br><span class="line">如：</span><br><span class="line"></span><br><span class="line">override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))</span><br><span class="line"></span><br><span class="line">如 果 我 们 的 “$(VPATH)” 值 是 “src:../headers” ， 那 么 “$(patsubst</span><br><span class="line">%,-I%,$(subst :, ,$(VPATH)))”将返回“-Isrc -I../headers”，这正是 cc 或 gcc 搜索</span><br><span class="line">头文件路径的参数。</span><br></pre></td></tr></table></figure><h3 id="文件名操作函数"><a href="#文件名操作函数" class="headerlink" title="文件名操作函数"></a>文件名操作函数</h3><p>下面我们要介绍的函数主要是处理文件名的。每个函数的参数字符串都会被当做一个或是一系列的文件名来对待。</p><h4 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(dir &lt;names...&gt;)</span><br><span class="line"></span><br><span class="line">名称：取目录函数——dir。</span><br><span class="line">功能：从文件名序列&lt;names&gt;中取出目录部分。目录部分是指最后一个反斜杠（“/”）之前</span><br><span class="line">的部分。如果没有反斜杠，那么返回“./”。</span><br><span class="line">返回：返回文件名序列&lt;names&gt;的目录部分。</span><br><span class="line">示例： $(dir src/foo.c hacks)返回值是“src/ ./”。</span><br></pre></td></tr></table></figure><h4 id="notdir"><a href="#notdir" class="headerlink" title="notdir"></a>notdir</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(notdir &lt;names...&gt;) </span><br><span class="line"></span><br><span class="line">名称：取文件函数——notdir。</span><br><span class="line">功能：从文件名序列&lt;names&gt;中取出非目录部分。非目录部分是指最后一个反斜杠（“ /”）</span><br><span class="line">之后的部分。</span><br><span class="line">返回：返回文件名序列&lt;names&gt;的非目录部分。</span><br><span class="line">示例： $(notdir src/foo.c hacks)返回值是“foo.c hacks”。</span><br></pre></td></tr></table></figure><h4 id="suffix"><a href="#suffix" class="headerlink" title="suffix"></a>suffix</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(suffix &lt;names...&gt;)</span><br><span class="line"></span><br><span class="line">名称：取后缀函数——suffix。</span><br><span class="line">功能：从文件名序列&lt;names&gt;中取出各个文件名的后缀。</span><br><span class="line">返回：返回文件名序列&lt;names&gt;的后缀序列，如果文件没有后缀，则返回空字串。</span><br><span class="line">示例：$(suffix src/foo.c src-1.0/bar.c hacks)返回值是“.c .c”。</span><br></pre></td></tr></table></figure><h4 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(basename &lt;names...&gt;)</span><br><span class="line"></span><br><span class="line">名称：取前缀函数——basename。</span><br><span class="line">功能：从文件名序列&lt;names&gt;中取出各个文件名的前缀部分。</span><br><span class="line">返回：返回文件名序列&lt;names&gt;的前缀序列，如果文件没有前缀，则返回空字串。</span><br><span class="line">示例：$(basename src/foo.c src-1.0/bar.c hacks)返回值是“src/foo src-1.0/b</span><br><span class="line">ar hacks”。</span><br></pre></td></tr></table></figure><h4 id="addsuffix"><a href="#addsuffix" class="headerlink" title="addsuffix"></a>addsuffix</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(addsuffix &lt;suffix&gt;,&lt;names...&gt;)</span><br><span class="line"></span><br><span class="line">名称：加后缀函数——addsuffix。</span><br><span class="line">功能：把后缀&lt;suffix&gt;加到&lt;names&gt;中的每个单词后面。</span><br><span class="line">返回：返回加过后缀的文件名序列。</span><br><span class="line">示例：$(addsuffix .c,foo bar)返回值是“foo.c bar.c”。</span><br></pre></td></tr></table></figure><h4 id="addprefix"><a href="#addprefix" class="headerlink" title="addprefix"></a>addprefix</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(addprefix &lt;prefix&gt;,&lt;names...&gt;)</span><br><span class="line"></span><br><span class="line">名称：加前缀函数——addprefix。</span><br><span class="line">功能：把前缀&lt;prefix&gt;加到&lt;names&gt;中的每个单词后面。</span><br><span class="line">返回：返回加过前缀的文件名序列。</span><br><span class="line">示例：$(addprefix src/,foo bar)返回值是“src/foo src/bar”。</span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(join &lt;list1&gt;,&lt;list2&gt;)</span><br><span class="line"></span><br><span class="line">名称：连接函数——join。</span><br><span class="line">功能：把&lt;list2&gt;中的单词对应地加到&lt;list1&gt;的单词后面。如果&lt;list1&gt;的单词个数要比</span><br><span class="line">&lt;list2&gt;的多，那么，&lt;list1&gt;中的多出来的单词将保持原样。如果&lt;list2&gt;的单词个数要比</span><br><span class="line">&lt;list1&gt;多，那么，&lt;list2&gt;多出来的单词将被复制到&lt;list2&gt;中。</span><br><span class="line">返回：返回连接过后的字符串。</span><br><span class="line">示例：$(join aaa bbb , 111 222 333)返回值是“aaa111 bbb222 333”。</span><br></pre></td></tr></table></figure><h3 id="foreach-函数"><a href="#foreach-函数" class="headerlink" title="foreach 函数"></a>foreach 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    foreach 函数和别的函数非常的不一样。因为这个函数是用来做循环用的，Makefile</span><br><span class="line">中的 foreach 函数几乎是仿照于 Unix 标准 Shell（/bin/sh）中的 for 语句，或是 C-Shell</span><br><span class="line">（/bin/csh）中的 foreach 语句而构建的。它的语法是：</span><br><span class="line">$(foreach &lt;var&gt;,&lt;list&gt;,&lt;text&gt;)</span><br><span class="line"></span><br><span class="line">    这个函数的意思是，把参数&lt;list&gt;中的单词逐一取出放到参数&lt;var&gt;所指定的变量中，</span><br><span class="line">然后再执行&lt;text&gt;所包含的表达式。每一次&lt;text&gt;会返回一个字符串，循环过程中，&lt;text&gt;</span><br><span class="line">的所返回的每个字符串会以空格分隔，最后当整个循环结束时，&lt;text&gt;所返回的每个字符串</span><br><span class="line">所组成的整个字符串（以空格分隔）将会是 foreach 函数的返回值。</span><br><span class="line"></span><br><span class="line">    所以，&lt;var&gt;最好是一个变量名，&lt;list&gt;可以是一个表达式，而&lt;text&gt;中一般会使用&lt;var&gt;</span><br><span class="line">这个参数来依次枚举&lt;list&gt;中的单词。举个例子：</span><br><span class="line">names := a b c d</span><br><span class="line">files := $(foreach n,$(names),$(n).o)</span><br><span class="line">    上面的例子中，$(name)中的单词会被挨个取出，并存到变量“n”中，“$(n).o”每次</span><br><span class="line">根据“$(n)”计算出一个值，这些值以空格分隔，最后作为 foreach 函数的返回，所以，</span><br><span class="line">$(files)的值是“a.o b.o c.o d.o”。</span><br><span class="line"></span><br><span class="line">    注意，foreach 中的&lt;var&gt;参数是一个临时的局部变量，foreach 函数执行完后，参数</span><br><span class="line">&lt;var&gt;的变量将不在作用，其作用域只在 foreach 函数当中。</span><br></pre></td></tr></table></figure><h3 id="if-函数"><a href="#if-函数" class="headerlink" title="if 函数"></a>if 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    if 函数很像 GNU 的 make 所支持的条件语句——ifeq（参见前面所述的章节），if 函数</span><br><span class="line">的语法是：</span><br><span class="line">$(if &lt;condition&gt;,&lt;then-part&gt;) </span><br><span class="line">或是</span><br><span class="line">$(if &lt;condition&gt;,&lt;then-part&gt;,&lt;else-part&gt;)</span><br><span class="line">    可见，if 函数可以包含“else”部分，或是不含。即 if 函数的参数可以是两个，也可</span><br><span class="line">以是三个。&lt;condition&gt;参数是 if 的表达式，如果其返回的为非空字符串，那么这个表达式</span><br><span class="line">就相当于返回真，于是，&lt;then-part&gt;会被计算，否则&lt;else-part&gt;会被计算。</span><br><span class="line"></span><br><span class="line">    而 if 函数的返回值是，如果&lt;condition&gt;为真（非空字符串），那个&lt;then-part&gt;会是整</span><br><span class="line">个函数的返回值，如果&lt;condition&gt;为假（空字符串），那么&lt;else-part&gt;会是整个函数的返</span><br><span class="line">回值，此时如果&lt;else-part&gt;没有被定义，那么，整个函数返回空字串。</span><br><span class="line"></span><br><span class="line">    所以，&lt;then-part&gt;和&lt;else-part&gt;只会有一个被计算。</span><br></pre></td></tr></table></figure><h3 id="call-函数"><a href="#call-函数" class="headerlink" title="call 函数"></a>call 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    call 函数是唯一一个可以用来创建新的参数化的函数。你可以写一个非常复杂的表达</span><br><span class="line">式，这个表达式中，你可以定义许多参数，然后你可以用 call 函数来向这个表达式传递参</span><br><span class="line">数。其语法是：</span><br><span class="line"></span><br><span class="line">$(call &lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,&lt;parm3&gt;...)</span><br><span class="line"></span><br><span class="line">    当 make 执行这个函数时，&lt;expression&gt;参数中的变量，如$(1)，$(2)，$(3)等，会被</span><br><span class="line">参数&lt;parm1&gt;，&lt;parm2&gt;，&lt;parm3&gt;依次取代。而&lt;expression&gt;的返回值就是 call 函数的返回</span><br><span class="line">值。例如：</span><br><span class="line">reverse = $(1) $(2)</span><br><span class="line">foo = $(call reverse,a,b)</span><br><span class="line">    那么，foo 的值就是“a b”。当然，参数的次序是可以自定义的，不一定是顺序的，</span><br><span class="line">如：</span><br><span class="line">reverse = $(2) $(1)</span><br><span class="line">foo = $(call reverse,a,b)</span><br><span class="line">此时的 foo 的值就是“b a”。</span><br></pre></td></tr></table></figure><h3 id="origin-函数"><a href="#origin-函数" class="headerlink" title="origin 函数"></a>origin 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    origin 函数不像其它的函数，他并不操作变量的值，他只是告诉你你的这个变量是哪</span><br><span class="line">里来的？其语法是：</span><br><span class="line">$(origin &lt;variable&gt;)</span><br><span class="line">   注意，&lt;variable&gt;是变量的名字，不应该是引用。所以你最好不要在&lt;variable&gt;中使用</span><br><span class="line">“$”字符。Origin 函数会以其返回值来告诉你这个变量的“出生情况”，下面，是 origin</span><br><span class="line">函数的返回值: </span><br><span class="line"></span><br><span class="line">“undefined”</span><br><span class="line">如果&lt;variable&gt;从来没有定义过，origin 函数返回这个值“undefined”。</span><br><span class="line"></span><br><span class="line">“default”</span><br><span class="line">如果&lt;variable&gt;是一个默认的定义，比如“CC”这个变量，这种变量我们将在后面</span><br><span class="line">讲述。environment” 如果&lt;variable&gt;是一个环境变量，并且当 Makefile 被执行时，“-e”</span><br><span class="line">参数没有被打开。</span><br><span class="line"></span><br><span class="line">“file”</span><br><span class="line">如果&lt;variable&gt;这个变量被定义在 Makefile 中。</span><br><span class="line"></span><br><span class="line">“command line”</span><br><span class="line">如果&lt;variable&gt;这个变量是被命令行定义的。</span><br><span class="line"></span><br><span class="line">“override”</span><br><span class="line">如果&lt;variable&gt;是被 override 指示符重新定义的。</span><br><span class="line"></span><br><span class="line">“automatic”</span><br><span class="line"> 如果&lt;variable&gt;是一个命令运行中的自动化变量。关于自动化变量将在后面讲述。</span><br><span class="line"></span><br><span class="line">    这些信息对于我们编写 Makefile 是非常有用的，例如，假设我们有一个 Makefile 其包</span><br><span class="line">了一个定义文件 Make.def，在 Make.def 中定义了一个变量“bletch”，而我们的环境中也</span><br><span class="line">有一个环境变量“bletch”，此时，我们想判断一下，如果变量来源于环境，那么我们就把</span><br><span class="line">之重定义了，如果来源于 Make.def 或是命令行等非环境的，那么我们就不重新定义它。于</span><br><span class="line">是，在我们的 Makefile 中，我们可以这样写：</span><br><span class="line">ifdef bletch</span><br><span class="line">ifeq &quot;$(origin bletch)&quot; &quot;environment&quot;</span><br><span class="line">bletch = barf, gag, etc.</span><br><span class="line">endif</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">    当然，你也许会说，使用 override 关键字不就可以重新定义环境中的变量了吗？为什</span><br><span class="line">么需要使用这样的步骤？是的，我们用 override 是可以达到这样的效果，可是 override</span><br><span class="line">过于粗暴，它同时会把从命令行定义的变量也覆盖了，而我们只想重新定义环境传来的，而</span><br><span class="line">不想重新定义命令行传来的。</span><br></pre></td></tr></table></figure><h3 id="shell-函数"><a href="#shell-函数" class="headerlink" title="shell 函数"></a>shell 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">shell 函数也不像其它的函数。顾名思义，它的参数应该就是操作系统 Shell 的命令。</span><br><span class="line">它和反引号“`”是相同的功能。这就是说，shell 函数把执行操作系统命令后的输出作为</span><br><span class="line">函数返回。于是，我们可以用操作系统命令以及字符串处理命令 awk，sed 等等命令来生成</span><br><span class="line">一个变量，如：</span><br><span class="line">contents := $(shell cat foo)</span><br><span class="line">files := $(shell echo *.c)</span><br><span class="line">注意，这个函数会新生成一个 Shell 程序来执行命令，所以你要注意其运行性能，如果你的</span><br><span class="line">Makefile 中有一些比较复杂的规则，并大量使用了这个函数，那么对于你的系统性能是有</span><br><span class="line">害的。特别是 Makefile 的隐晦的规则可能会让你的 shell 函数执行的次数比你想像的多得</span><br><span class="line">多。</span><br></pre></td></tr></table></figure><h2 id="控制-make-的函数"><a href="#控制-make-的函数" class="headerlink" title="控制 make 的函数"></a>控制 make 的函数</h2><p>make 提供了一些函数来控制 make 的运行。通常，你需要检测一些运行 Makefile 时的<br>运行时信息，并且根据这些信息来决定，你是让 make 继续执行，还是停止。 </p><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(error &lt;text ...&gt;)</span><br><span class="line">    产生一个致命的错误，&lt;text ...&gt;是错误信息。注意，error 函数不会在一被使用就会</span><br><span class="line">产生错误信息，所以如果你把其定义在某个变量中，并在后续的脚本中使用这个变量，那么</span><br><span class="line">也是可以的。例如：</span><br><span class="line">示例一：</span><br><span class="line">ifdef ERROR_001</span><br><span class="line">$(error error is $(ERROR_001))</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">示例二：</span><br><span class="line">ERR = $(error found an error!)</span><br><span class="line">.PHONY: err</span><br><span class="line">err: ; $(ERR)</span><br><span class="line"></span><br><span class="line">    示例一会在变量 ERROR_001 定义了后执行时产生 error 调用，而示例二则在目录 err</span><br><span class="line">被执行时才发生 error 调用。</span><br></pre></td></tr></table></figure><h3 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(warning &lt;text ...&gt;)</span><br><span class="line"></span><br><span class="line">这个函数很像 error 函数，只是它并不会让 make 退出，只是输出一段警告信息，而 make 继续执行。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;函数的调用语法&quot;&gt;&lt;a href=&quot;#函数的调用语法&quot; class=&quot;headerlink&quot; title=&quot;函数的调用语法&quot;&gt;&lt;/a&gt;函数的调用语法&lt;/h3&gt;&lt;p&gt;函数调用，很像变量的使用，也是以“$”来标识的，其语法如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&amp;lt;function&amp;gt; &amp;lt;arguments&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或是&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;&amp;lt;function&amp;gt; &amp;lt;arguments&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里，&lt;code&gt;&amp;lt;function&amp;gt;&lt;/code&gt;就是函数名，make 支持的函数不多。&lt;code&gt;&amp;lt;arguments&amp;gt;&lt;/code&gt;是函数的参数，参数间&lt;br&gt;以逗号“,”分隔，而函数名和参数之间以“空格”分隔。函数调用以“$”开头，以圆括号&lt;br&gt;或花括号把函数名和参数括起。感觉很像一个变量，是不是？函数中的参数可以使用变量，&lt;br&gt;为了风格的统一，函数和变量的括号最好一样，如使用“$(subst a,b,$(x))”这样的形式，&lt;br&gt;而不是“$(subst a,b,${x})”的形式。因为统一会更清楚，也会减少一些不必要的麻烦。&lt;/p&gt;
&lt;p&gt;还是来看一个示例：&lt;/p&gt;
&lt;p&gt;comma:= ,&lt;br&gt;empty:=&lt;br&gt;space:= $(empty) $(empty)&lt;br&gt;foo:= a b c&lt;br&gt;bar:= $(subst $(space),$(comma),$(foo))&lt;/p&gt;
&lt;p&gt;在这个示例中，$(comma)的值是一个逗号。$(space)使用了$(empty)定义了一个空格，$(foo)&lt;br&gt;的值是“a b c”，$(bar)的定义用，调用了函数“subst”，这是一个替换函数，这个函数&lt;br&gt;有三个参数，第一个参数是被替换字串，第二个参数是替换字串，第三个参数是替换操作作&lt;br&gt;用的字串。这个函数也就是把$(foo)中的空格替换成逗号，所以$(bar)的值是“a,b,c”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Makefile" scheme="http://yoursite.com/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>curl使用教程</title>
    <link href="http://yoursite.com/notes/curl%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/20180605.html"/>
    <id>http://yoursite.com/notes/curl使用教程/20180605.html</id>
    <published>2018-06-05T08:48:26.000Z</published>
    <updated>2018-06-05T08:49:52.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="只要输出结果，不加任何参数，-GET-请求。-示例：获取出口-ip-信息"><a href="#只要输出结果，不加任何参数，-GET-请求。-示例：获取出口-ip-信息" class="headerlink" title="只要输出结果，不加任何参数， GET 请求。 示例：获取出口 ip 信息"></a>只要输出结果，不加任何参数， GET 请求。 示例：获取出口 ip 信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://ipinfo.io</span><br></pre></td></tr></table></figure><p>输出结果</p><blockquote><p>{<br>“ip”: “66.112.223.167”,<br>“hostname”: “66.112.223.167.16clouds.com”,<br>“city”: “Los Angeles”,<br>“region”: “California”,<br>“country”: “US”,<br>“loc”: “34.0494,-118.2641”,<br>“org”: “AS25820 IT7 Networks Inc”,<br>“postal”: “90014”<br>}</p></blockquote><a id="more"></a><h3 id="获取-response-header-信息-示例"><a href="#获取-response-header-信息-示例" class="headerlink" title="获取 response header 信息 示例:"></a>获取 response header 信息 示例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -I http://voice.hupu.com</span><br></pre></td></tr></table></figure><p>输出结果</p><blockquote><p>HTTP/1.1 301 Moved Permanently<br>Server: nginx<br>Date: Tue, 08 Aug 2017 10:05:04 GMT<br>Content-Type: text/html<br>Content-Length: 178<br>Connection: keep-alive<br>Location: <a href="https://voice.hupu.com/" target="_blank" rel="noopener">https://voice.hupu.com/</a><br>X-Server: zhangwuji-lb-24-34-prd.vm.jh</p></blockquote><h3 id="获取-response-header-信息，并跟踪重定向（Location）-示例："><a href="#获取-response-header-信息，并跟踪重定向（Location）-示例：" class="headerlink" title="获取 response header 信息，并跟踪重定向（Location） 示例："></a>获取 response header 信息，并跟踪重定向（Location） 示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -I -L http://voice.hupu.com</span><br></pre></td></tr></table></figure><p>输出结果</p><blockquote><p>HTTP/1.1 301 Moved Permanently<br>Server: nginx<br>Date: Tue, 08 Aug 2017 10:17:34 GMT<br>Content-Type: text/html<br>Content-Length: 178<br>Connection: keep-alive<br>Location: <a href="https://voice.hupu.com/" target="_blank" rel="noopener">https://voice.hupu.com/</a><br>X-Server: zhangwuji-lb-24-35-prd.vm.jh</p><p>HTTP/1.1 302 Found<br>Server: nginx<br>Date: Tue, 08 Aug 2017 10:17:35 GMT<br>Content-Type: text/html; charset=utf-8<br>Connection: keep-alive<br>X-Powered-By: PHP/5.4.41<br>Location: <a href="http://voice.hupu.com/hot" target="_blank" rel="noopener">http://voice.hupu.com/hot</a><br>X-Cache: BYPASS<br>X-Server: zhangwuji-lb-20-237-prd.vm.jh</p><p>HTTP/1.1 301 Moved Permanently<br>Server: nginx<br>Date: Tue, 08 Aug 2017 10:17:36 GMT<br>Content-Type: text/html<br>Content-Length: 178<br>Connection: keep-alive<br>Location: <a href="https://voice.hupu.com/hot" target="_blank" rel="noopener">https://voice.hupu.com/hot</a><br>X-Server: zhangwuji-lb-24-35-prd.vm.jh</p><p>HTTP/1.1 200 OK<br>Server: nginx<br>Date: Tue, 08 Aug 2017 10:17:36 GMT<br>Content-Type: text/html; charset=utf-8<br>Connection: keep-alive<br>Vary: Accept-Encoding<br>Vary: Accept-Encoding<br>X-Powered-By: PHP/5.4.41<br>X-Cache: BYPASS<br>X-Server: zhangwuji-lb-20-237-prd.vm.jh</p></blockquote><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="下载单个文件，并保存为一样的名字"><a href="#下载单个文件，并保存为一样的名字" class="headerlink" title="下载单个文件，并保存为一样的名字"></a>下载单个文件，并保存为一样的名字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O http://voice.hupu.com/nba/1977117.html</span><br></pre></td></tr></table></figure><h3 id="结合-shell-中的-pattern-下载多个文件"><a href="#结合-shell-中的-pattern-下载多个文件" class="headerlink" title="结合 shell 中的 pattern, 下载多个文件"></a>结合 shell 中的 pattern, 下载多个文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O http://voice.hupu.com/nba/[1977117-1977222].html</span><br></pre></td></tr></table></figure><h3 id="下载大文件断点续传，-C-会自动判断从哪里开始继续下载"><a href="#下载大文件断点续传，-C-会自动判断从哪里开始继续下载" class="headerlink" title="下载大文件断点续传， -C - 会自动判断从哪里开始继续下载"></a>下载大文件断点续传， -C - 会自动判断从哪里开始继续下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -C - -O http://mirrors.163.com/centos/6.7/isos/x86_64/CentOS-6.7-x86_64-minimal.iso</span><br></pre></td></tr></table></figure><h2 id="模拟-cookie-referer-user-agent-header-访问"><a href="#模拟-cookie-referer-user-agent-header-访问" class="headerlink" title="模拟 cookie, referer, user-agent, header 访问"></a>模拟 cookie, referer, user-agent, header 访问</h2><h3 id="模拟-cookie"><a href="#模拟-cookie" class="headerlink" title="模拟 cookie"></a>模拟 cookie</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -o /dev/null --cookie &apos;__nmj=1;foo=bar&apos; http://www.hupu.com</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">* About to connect() to www.hupu.com port 80 (#0)</span><br><span class="line">*   Trying 66.198.178.56... connected</span><br><span class="line">* Connected to www.hupu.com (66.198.178.56) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.19.7 (i386-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span><br><span class="line">&gt; Host: www.hupu.com</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; Cookie: __nmj=1;foo=bar</span><br><span class="line">&gt; </span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:--  0:00:02 --:--:--     0&lt; HTTP/1.1 301 Moved Permanently</span><br><span class="line">&lt; Server: Tengine</span><br><span class="line">&lt; Date: Tue, 08 Aug 2017 11:01:32 GMT</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Content-Length: 278</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Location: https://www.hupu.com/</span><br><span class="line">&lt; Via: cache10.us3[,0]</span><br><span class="line">&lt; Timing-Allow-Origin: *</span><br><span class="line">&lt; EagleId: 42c6b24915021900922565323e</span><br><span class="line">&lt; </span><br><span class="line">&#123; [data not shown]</span><br><span class="line">139   278  139   278    0     0    133      0  0:00:02  0:00:02 --:--:--  4028* Connection #0 to host www.hupu.com left intact</span><br><span class="line"></span><br><span class="line">* Closing connection #0</span><br></pre></td></tr></table></figure></p><h3 id="模拟-referer"><a href="#模拟-referer" class="headerlink" title="模拟 referer"></a>模拟 referer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -o /dev/null -e &apos;http://whatever.com&apos; http://www.hupu.com</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* About to connect() to www.hupu.com port 80 (#0)</span><br><span class="line">*   Trying 66.198.178.51... connected</span><br><span class="line">* Connected to www.hupu.com (66.198.178.51) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.19.7 (i386-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span><br><span class="line">&gt; Host: www.hupu.com</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; Referer: http://whatever.com</span><br><span class="line">&gt; </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="模拟-user-agent"><a href="#模拟-user-agent" class="headerlink" title="模拟 user-agent"></a>模拟 user-agent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -o /dev/null -A &apos;Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X)&apos; http://www.hupu.com</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* About to connect() to www.hupu.com port 80 (#0)</span><br><span class="line">*   Trying 66.198.178.51... connected</span><br><span class="line">* Connected to www.hupu.com (66.198.178.51) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X)</span><br><span class="line">&gt; Host: www.hupu.com</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="带一些-header-去访问"><a href="#带一些-header-去访问" class="headerlink" title="带一些 header 去访问"></a>带一些 header 去访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -o /dev/null -H &apos;Accept: application/json&apos; -H &apos;Content-type: application/json&apos; -H &apos;X-Forwarded-For: 8.8.8.8&apos; http://www.hupu.com</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* About to connect() to www.hupu.com port 80 (#0)</span><br><span class="line">*   Trying 66.198.178.112... connected</span><br><span class="line">* Connected to www.hupu.com (66.198.178.112) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.19.7 (i386-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span><br><span class="line">&gt; Host: www.hupu.com</span><br><span class="line">&gt; Accept: application/json</span><br><span class="line">&gt; Content-type: application/json</span><br><span class="line">&gt; X-Forwarded-For: 8.8.8.8</span><br><span class="line">&gt; </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="指定代理服务器访问"><a href="#指定代理服务器访问" class="headerlink" title="指定代理服务器访问"></a>指定代理服务器访问</h2><h3 id="指定-http-代理"><a href="#指定-http-代理" class="headerlink" title="指定 http 代理"></a>指定 http 代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x 211.61.47.19:80 http://www.hupu.com</span><br></pre></td></tr></table></figure><h3 id="指定-socks5-代理"><a href="#指定-socks5-代理" class="headerlink" title="指定 socks5 代理"></a>指定 socks5 代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --socks5 127.0.0.1:1081 http://www.hupu.com</span><br></pre></td></tr></table></figure><h2 id="curl-输出访问过程，变量用于分析问题"><a href="#curl-输出访问过程，变量用于分析问题" class="headerlink" title="curl 输出访问过程，变量用于分析问题"></a>curl 输出访问过程，变量用于分析问题</h2><p><strong>-v，显示模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -o /dev/null http://www.hupu.com</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">* About to connect() to www.hupu.com port 80 (#0)</span><br><span class="line">*   Trying 66.102.255.31... connected</span><br><span class="line">* Connected to www.hupu.com (66.102.255.31) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.19.7 (i386-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span><br><span class="line">&gt; Host: www.hupu.com</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0&lt; HTTP/1.1 301 Moved Permanently</span><br><span class="line">&lt; Server: Tengine</span><br><span class="line">&lt; Date: Tue, 08 Aug 2017 11:27:51 GMT</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Content-Length: 278</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Location: https://www.hupu.com/</span><br><span class="line">&lt; Via: cache6.us1[,0]</span><br><span class="line">&lt; Timing-Allow-Origin: *</span><br><span class="line">&lt; EagleId: 4266ff0615021916714581516e</span><br><span class="line">&lt; </span><br><span class="line">&#123; [data not shown]</span><br><span class="line">139   278  139   278    0     0    152      0  0:00:01  0:00:01 --:--:--  135k* Connection #0 to host www.hupu.com left intact</span><br><span class="line"></span><br><span class="line">* Closing connection #0</span><br></pre></td></tr></table></figure></p><p><code>curl -v</code> 显示请求站点，端口，解析到的 ip 地址， &gt; 代表发送的 header，&lt; 代表接收到的 header。</p><p><code>-w</code> 可以将更底层交互时一些变量输出出来，变量名前面要加 %{variable_name}。</p><p>一些有用的变量如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%&#123;http_code&#125; 状态码</span><br><span class="line">%&#123;size_download&#125; 文件大小</span><br><span class="line">%&#123;speed_download&#125; 下载速度</span><br><span class="line">%&#123;time_connect&#125; 从开始到建立 tcp 用时</span><br><span class="line">%&#123;time_namelookup&#125; 从开始到解析到 ip 用时</span><br><span class="line">%&#123;time_pretransfer&#125; 从开始到传输开始用时</span><br><span class="line">%&#123;time_starttransfer&#125; 从开始到第一个字节到达用时</span><br><span class="line">%&#123;time_total&#125; 从开始到结束总共用时</span><br></pre></td></tr></table></figure><p>可以通过 (time_pretransfer – time_connect) 计算出服务器从接到请求到准备传输，即服务器处理用时来评判断服务器性能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /dev/null -w &apos;time_total: %&#123;time_total&#125;&apos; http://www.hupu.com</span><br></pre></td></tr></table></figure><p><strong>总结： 结合不同参数可以方便的根据需要来进行 http url 的交互，相对于浏览器及 postman 等工具更轻量和灵活</strong></p><p>参考blog：<br><a href="http://blog.csdn.net/ebw123/article/details/50556680" target="_blank" rel="noopener">http://blog.csdn.net/ebw123/article/details/50556680</a><br><a href="https://segmentfault.com/a/1190000005177475" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005177475</a><br><a href="http://man.linuxde.net/curl" target="_blank" rel="noopener">http://man.linuxde.net/curl</a></p><p><a href="https://curl.haxx.se/" target="_blank" rel="noopener">官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;只要输出结果，不加任何参数，-GET-请求。-示例：获取出口-ip-信息&quot;&gt;&lt;a href=&quot;#只要输出结果，不加任何参数，-GET-请求。-示例：获取出口-ip-信息&quot; class=&quot;headerlink&quot; title=&quot;只要输出结果，不加任何参数， GET 请求。 示例：获取出口 ip 信息&quot;&gt;&lt;/a&gt;只要输出结果，不加任何参数， GET 请求。 示例：获取出口 ip 信息&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl http://ipinfo.io&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{&lt;br&gt;“ip”: “66.112.223.167”,&lt;br&gt;“hostname”: “66.112.223.167.16clouds.com”,&lt;br&gt;“city”: “Los Angeles”,&lt;br&gt;“region”: “California”,&lt;br&gt;“country”: “US”,&lt;br&gt;“loc”: “34.0494,-118.2641”,&lt;br&gt;“org”: “AS25820 IT7 Networks Inc”,&lt;br&gt;“postal”: “90014”&lt;br&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo站内链接引用的方法</title>
    <link href="http://yoursite.com/notes/Hexo%E7%AB%99%E5%86%85%E9%93%BE%E6%8E%A5%E5%BC%95%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/20180605.html"/>
    <id>http://yoursite.com/notes/Hexo站内链接引用的方法/20180605.html</id>
    <published>2018-06-05T08:33:49.000Z</published>
    <updated>2018-06-05T08:38:01.344Z</updated>
    
    <content type="html"><![CDATA[<p>我们在Hexo中编写的文件都是Markdown文件，但是最终生成的静态文件<br>的路径是编辑日期加文件名，具体形式跟 <code>_config.yml</code> 的配置有关. </p><p>而每个Markdown文件的编辑日期又是不同的，所以要去查找编辑日期就不现实了。<br>好在我们可以通过 <code>post_link</code> 来实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link 文章源文件(不要后缀) 链接名(可选) %&#125;</span><br></pre></td></tr></table></figure><p>我们以 <code>hello-world.md</code> 为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hello-world %&#125;</span><br></pre></td></tr></table></figure><a href="/notes/hello-world/20180605.html" title="Hello World">Hello World</a><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hello-world  Hello %&#125;</span><br></pre></td></tr></table></figure><a href="/notes/hello-world/20180605.html" title="Hello">Hello</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在Hexo中编写的文件都是Markdown文件，但是最终生成的静态文件&lt;br&gt;的路径是编辑日期加文件名，具体形式跟 &lt;code&gt;_config.yml&lt;/code&gt; 的配置有关. &lt;/p&gt;
&lt;p&gt;而每个Markdown文件的编辑日期又是不同的，所以要去查找编辑日期就不现
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Markdown 使用手册</title>
    <link href="http://yoursite.com/notes/Hexo-Markdown/20180605.html"/>
    <id>http://yoursite.com/notes/Hexo-Markdown/20180605.html</id>
    <published>2018-06-05T07:42:55.000Z</published>
    <updated>2018-06-05T08:10:14.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插入网易云音乐"><a href="#插入网易云音乐" class="headerlink" title="插入网易云音乐"></a>插入网易云音乐</h3><h4 id="插入单首歌"><a href="#插入单首歌" class="headerlink" title="插入单首歌"></a>插入单首歌</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"330"</span> <span class="attr">height</span>=<span class="string">"86"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://music.163.com/outchain/player?type=2&amp;id=28592966&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>auto=0</code> 打开网页自动播放，<code>auto=1</code> 不自动播放<br><code>id=28592966</code> 歌曲的id，可以登录网易云音乐的PC客户端，选择想要插入的音乐，点击”分享”，然后复制链接。<br>例如我复制的链接是: <code>https://music.163.com/song?id=28592966&amp;userid=259096171</code> , 提取id字段即可。</p></blockquote><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=28592966&auto=0&height=66"></iframe><h4 id="插入歌单"><a href="#插入歌单" class="headerlink" title="插入歌单"></a>插入歌单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"330"</span> <span class="attr">height</span>=<span class="string">"330"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://music.163.com/outchain/player?type=0&amp;id=325667064&amp;auto=0&amp;height=430"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>auto=0</code> 打开网页自动播放，<code>auto=1</code> 不自动播放<br><code>id=325667064</code> 歌单的id，可以登录网易云音乐的PC客户端，选择想要插入的歌单，点击”分享”，然后复制链接。<br>例如我复制的链接是: <code>https://music.163.com/playlist?id=325667064&amp;userid=259096171</code> , 提取id字段即可。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="330" src="https://music.163.com/outchain/player?type=0&id=325667064&auto=0&height=430"></iframe><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>上有人分享网易云音乐的插件<a href="https://github.com/qinyuanpei/hexo-tag-cloudmusic" target="_blank" rel="noopener">https://github.com/qinyuanpei/hexo-tag-cloudmusic</a></p><p>这里引用整理好的教程，包括图片、视频、音乐的插入等.</p><p><a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">Hexo-Markdown-简明语法手册</a></p><p><a href="http://www.zerokeeper.com/experience/hexo-blog-markdown-writing-grammar.html" target="_blank" rel="noopener">hexo 博客 markdown 书写语法</a></p><p><a href="https://baoyuzhang.github.io/2017/05/05/%E3%80%90Hexo%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%85%A8%E7%BA%AA%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BD%BF%E7%94%A8Markdown/" target="_blank" rel="noopener">Hexo搭建独立博客全纪录</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;插入网易云音乐&quot;&gt;&lt;a href=&quot;#插入网易云音乐&quot; class=&quot;headerlink&quot; title=&quot;插入网易云音乐&quot;&gt;&lt;/a&gt;插入网易云音乐&lt;/h3&gt;&lt;h4 id=&quot;插入单首歌&quot;&gt;&lt;a href=&quot;#插入单首歌&quot; class=&quot;headerlink&quot; title=&quot;插入单首歌&quot;&gt;&lt;/a&gt;插入单首歌&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;frameborder&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;no&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;border&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;marginwidth&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;marginheight&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;330&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;86&quot;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://music.163.com/outchain/player?type=2&amp;amp;id=28592966&amp;amp;auto=0&amp;amp;height=66&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;iframe&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;auto=0&lt;/code&gt; 打开网页自动播放，&lt;code&gt;auto=1&lt;/code&gt; 不自动播放&lt;br&gt;&lt;code&gt;id=28592966&lt;/code&gt; 歌曲的id，可以登录网易云音乐的PC客户端，选择想要插入的音乐，点击”分享”，然后复制链接。&lt;br&gt;例如我复制的链接是: &lt;code&gt;https://music.163.com/song?id=28592966&amp;amp;userid=259096171&lt;/code&gt; , 提取id字段即可。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/notes/hello-world/20180605.html"/>
    <id>http://yoursite.com/notes/hello-world/20180605.html</id>
    <published>2018-06-05T06:58:56.124Z</published>
    <updated>2018-06-05T06:58:56.123Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
